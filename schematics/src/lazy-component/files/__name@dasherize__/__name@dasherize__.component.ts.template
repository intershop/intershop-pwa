import {
  ChangeDetectionStrategy, Component, createNgModule, OnInit, ViewChild, ViewContainerRef,
  Injector,
  ComponentRef,
  <% if (inputNames.length) { %>Input, OnChanges, <% } %>
  <% if (onChanges === 'complex') { %>SimpleChange, SimpleChanges, <% } %>
} from '@angular/core';

<% if(guardDisplay) { %>
  import { FeatureToggleService } from 'ish-core/feature-toggle.module';
  import { takeUntil } from 'rxjs/operators';
<% } %>

import type { <%= classify(originalName) %>Component as OriginalComponent } from '<%= componentImportPath %>/<%= dasherize(originalName) %>/<%= dasherize(originalName) %>.component';

@Component({
  selector: '<%= selector %>',
  templateUrl: './<%= dasherize(name) %>.component.html',
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class <%= classify(name) %>Component implements OnInit <% if (inputNames.length) { %>, OnChanges <% } %>{
  /*
   * WARNING!
   *
   * This file was automatically generated!
   * It should be updated using:
   *
   * ng g lazy-component <%= originalPath %>
   *
   */

  @ViewChild('anchor', { read: ViewContainerRef, static: true }) anchor: ViewContainerRef;

<% for (let name of inputNames) { %>
  @Input() <%= name %>: OriginalComponent['<%= name %>'];
<% } %>

  private component: ComponentRef<OriginalComponent>;

  constructor(
    <% if(guardDisplay) { %>private featureToggleService: FeatureToggleService,<% } %>
    private injector: Injector
  ) {}

  <% if(!guardDisplay) { %>async<% } %> ngOnInit() {
    <% if(guardDisplay) { %> this.featureToggleService.enabled$('<%= camelize(guardDisplay) %>').pipe(takeUntil(this.destroy$)).subscribe(async enabled => {
      if (enabled) {
    <% } %>

      await this.renderComponent();

    <% if(guardDisplay){ %>
        } else {
          this.anchor.clear();
        }
      })
    <% } %>
  }

  private async renderComponent() {
    const module = await import(`../..<% if(isShared) { %>/../shared<% } %>/<%= dasherize(declaringModule) %>.module`).then(m => m.<%= classify(declaringModule) %>Module);

    const { <%= classify(originalName) %>Component: originalComponent } = await import('<%= componentImportPath %>/<%= dasherize(originalName) %>/<%= dasherize(originalName) %>.component');

    const ngModuleRef = createNgModule(module, this.injector);

    this.component = this.anchor.createComponent(originalComponent, { ngModuleRef });
  <% if (inputNames.length) { %>
    this.ngOnChanges(
      <% if (onChanges === 'complex') { %>{
        <% for (let name of inputNames) { %>
          <%= name %>: new SimpleChange(undefined, this.<%= name %>, true),
        <% } %>
        }
      <% } %>
    );
  <% } %>
    this.component.changeDetectorRef.markForCheck();
  }

<% if (inputNames.length) { %>
  ngOnChanges(<% if (onChanges === 'complex') { %>changes: SimpleChanges<% } %>) {
    if (this.component) {
      <% for (let name of inputNames) { %>
        this.component.instance.<%= name %> = this.<%= name %>;
      <% } %>

      <% if (onChanges === 'simple') { %>
        this.component.instance.ngOnChanges();
      <% } else if (onChanges === 'complex') { %>
        this.component.instance.ngOnChanges(changes);
      <% } %>
    }
  }
<% } %>
}
