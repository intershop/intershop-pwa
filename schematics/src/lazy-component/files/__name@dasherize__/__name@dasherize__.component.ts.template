import {
  ChangeDetectionStrategy, Component, createNgModuleRef, OnInit, ViewChild, ViewContainerRef,
  Injector,
  <% if (bindings.length) { %>ComponentRef, Input, OnChanges, <% } %>
  <% if (onChanges === 'complex') { %>SimpleChange, SimpleChanges, <% } %>
} from '@angular/core';

<% if(!isProject && !isShared) { %> import { FeatureToggleService } from 'ish-core/feature-toggle.module'; <% } %>

<% if (imports.length) { %><%= imports.map(i => `import { ${i.types.join(', ')} } from ${i.from};`).join('\n') %><% } %>

@Component({
  selector: '<%= selector %>',
  templateUrl: './<%= dasherize(name) %>.component.html',
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class <%= classify(name) %>Component implements OnInit <% if (bindings.length) { %>, OnChanges <% } %>{
  /*
   * WARNING!
   *
   * This file was automatically generated!
   * It should be updated using:
   *
   * ng g lazy-component <%= originalPath %>
   *
   */

  @ViewChild('anchor', { read: ViewContainerRef, static: true }) anchor: ViewContainerRef;
  <% if (bindings.length) { %><%= bindings.map(b => b.declaration).join('\n  ') %><% } %>

  <% if (bindings.length) { %>// tslint:disable-next-line: no-any - access in on-changes required
  private component: ComponentRef<any>;<% } %>

  constructor(
    <% if(!isProject && !isShared) { %> private featureToggleService: FeatureToggleService, <% } %>
    private injector: Injector
  ) {}

  async ngOnInit() {
    <% if(!isProject && !isShared) { %> if (this.featureToggleService.enabled('<%= camelize(extension) %>')) { <% } %>
      const module = await import(`../..<% if(isShared) { %>/../shared<% } %>/<%= dasherize(declaringModule) %>.module`).then(m => m.<%= classify(declaringModule) %>Module);

      // eslint-disable-next-line @typescript-eslint/naming-convention
      const { <%= classify(originalName) %>Component } = await import('<%= componentImportPath %>/<%= dasherize(originalName) %>/<%= dasherize(originalName) %>.component');

      const moduleRef = createNgModuleRef(module, this.injector);

    <% if (bindings.length) { %>
      this.component = this.anchor.createComponent(<%= classify(originalName) %>Component, { ngModuleRef: moduleRef });
      this.ngOnChanges(<% if (onChanges === 'complex') { %>{
          <%= bindings.map(b => `${b.name}: new SimpleChange(undefined, this.${b.name}, true),`).join('\n        ') %>
        }<% } %>);
      this.component.changeDetectorRef.markForCheck();
    <% } else { %>
      this.anchor.createComponent(<%= classify(originalName) %>Component, { ngModuleRef: moduleRef }).changeDetectorRef.markForCheck();
    <% } %>
    <% if(!isProject && !isShared){ %> } <% } %>
  }

<% if (bindings.length) { %>
  ngOnChanges(<% if (onChanges === 'complex') { %>changes: SimpleChanges<% } %>) {
    if (this.component) {
      <%= bindings.map(b => `this.component.instance.${b.name} = this.${b.name};`).join('\n    ') %>
      <% if (onChanges === 'simple') { %>this.component.instance.ngOnChanges();<% } else if (onChanges === 'complex') { %>this.component.instance.ngOnChanges(changes);<% } %>
    }
  }
<% } %>
}
