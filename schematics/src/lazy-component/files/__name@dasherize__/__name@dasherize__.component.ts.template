import {
  ChangeDetectionStrategy, Component, OnInit, ViewChild, ViewContainerRef,
  Compiler, Injector, NgModuleFactory,
  <% if (bindings.length) { %>ComponentRef, Input, OnChanges, <% } %>
  <% if (onChanges === 'complex') { %>SimpleChange, SimpleChanges, <% } %>
} from '@angular/core';

<% if(!isProject) { %> import { FeatureToggleService } from 'ish-core/feature-toggle.module'; <% } %>

<% if (imports.length) { %><%= imports.map(i => `import { ${i.types.join(', ')} } from ${i.from};`).join('\n') %><% } %>

@Component({
  selector: '<%= selector %>',
  templateUrl: './<%= dasherize(name) %>.component.html',
  changeDetection: ChangeDetectionStrategy.OnPush,
})
// tslint:disable-next-line:component-creation-test
export class <%= classify(name) %>Component implements OnInit <% if (bindings.length) { %>, OnChanges <% } %>{
  /*
   * WARNING!
   *
   * This file was automatically generated!
   * It should be updated using:
   *
   * ng g lazy-component <%= originalPath %>
   *
   */

  @ViewChild('anchor', { read: ViewContainerRef, static: true }) anchor: ViewContainerRef;
  <% if (bindings.length) { %><%= bindings.map(b => b.declaration).join('\n  ') %><% } %>

  <% if (bindings.length) { %>// tslint:disable-next-line: no-any
  private component: ComponentRef<any>;<% } %>

  constructor(
    <% if(!isProject) { %> private featureToggleService: FeatureToggleService, <% } %>
    private compiler: Compiler,
    private injector: Injector
  ) {}

  async ngOnInit() {
    <% if(!isProject) { %> if (this.featureToggleService.enabled('<%= camelize(extension) %>')) { <% } %>
      // prevent cyclic dependency warnings
      const extension = '<% if(isProject) { %><%= dasherize(projectName) %><% } else { %><%=dasherize(extension)%><% } %>';
      const moduleObj = await import(`../../${extension}.module`);
      const module = moduleObj[Object.keys(moduleObj)[0]];

      const { <%= classify(originalName) %>Component } = await import('../../<% if (isProject) { %>components<% } else { %>shared<% } %>/<%= dasherize(originalName) %>/<%= dasherize(originalName) %>.component');

      const moduleFactory = await this.loadModuleFactory(module);
      const moduleRef = moduleFactory.create(this.injector);
      const factory = moduleRef.componentFactoryResolver.resolveComponentFactory(<%= classify(originalName) %>Component);

    <% if (bindings.length) { %>
      this.component = this.anchor.createComponent(factory);
      this.ngOnChanges(<% if (onChanges === 'complex') { %>{
          <%= bindings.map(b => `${b.name}: new SimpleChange(undefined, this.${b.name}, true),`).join('\n        ') %>
        }<% } %>);
      this.component.changeDetectorRef.markForCheck();
    <% } else { %>
      this.anchor.createComponent(factory).changeDetectorRef.markForCheck();
    <% } %>
    <% if(!isProject){ %> } <% } %>
  }

<% if (bindings.length) { %>
  ngOnChanges(<% if (onChanges === 'complex') { %>changes: SimpleChanges<% } %>) {
    if (this.component) {
      <%= bindings.map(b => `this.component.instance.${b.name} = this.${b.name};`).join('\n    ') %>
      <% if (onChanges === 'simple') { %>this.component.instance.ngOnChanges();<% } else if (onChanges === 'complex') { %>this.component.instance.ngOnChanges(changes);<% } %>
    }
  }
<% } %>

  private async loadModuleFactory(t) {
    if (t instanceof NgModuleFactory) {
      return t;
    } else {
      return await this.compiler.compileModuleAsync(t);
    }
  }
}
