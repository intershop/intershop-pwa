import { TestBed } from '@angular/core/testing';
<% if (feature || extension) { %>import { combineReducers } from '@ngrx/store';
<% } %>
import { TestStore, ngrxTesting } from 'ish-core/utils/dev/ngrx-testing';
import { coreReducers } from 'ish-core/store/core-store.module';
<% if (feature) { %>import { <%= camelize(feature) %>Reducers } from 'ish-core/store/<%= dasherize(feature) %>/<%= dasherize(feature) %>-store.module';<% } else if (extension) { %>import { <%= camelize(extension) %>Reducers } from '../<%= dasherize(extension) %>-store.module';<% } %>
<% if(entity) { %>import { HttpError } from 'ish-core/models/http-error/http-error.model';
import { <%= classify(entity) %> } from '<% if(feature) { %>../<% } %>../../models/<%= dasherize(entity) %>/<%= dasherize(entity) %>.model';<% } %>

import * as actions from './<%= dasherize(name) %>.actions';
import { <% if (entity) { %>getNumberOf<%= classify(name) %>, get<%= classify(name) %>, get<%= classify(name) %>Entities, get<%= classify(name) %>Error, <% } %>get<%= classify(name) %>Loading } from './<%= dasherize(name) %>.selectors';

describe('<%= classify(name) %> Selectors', () => {
  let store$: TestStore;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: ngrxTesting({ reducers: {
        ...coreReducers<% if (feature) { %>,
        <%= camelize(feature) %>: combineReducers(<%= camelize(feature) %>Reducers),<% } else if (extension) { %>,
        <%= camelize(extension) %>: combineReducers(<%= camelize(extension) %>Reducers),<% } %>
      }}),
    });

    store$ = TestBed.get(TestStore);
  });

  describe('initial state', () => {
    it('should not be loading when in initial state', () => {
      expect(get<%= classify(name) %>Loading(store$.state)).toBeFalse();
    });
<% if (entity) { %>
    it('should not have an error when in initial state', () => {
      expect(get<%= classify(name) %>Error(store$.state)).toBeUndefined();
    });

    it('should not have entites when in initial state', () => {
      expect(get<%= classify(name) %>Entities(store$.state)).toBeEmpty();
      expect(get<%= classify(name) %>(store$.state)).toBeEmpty();
      expect(getNumberOf<%= classify(name) %>(store$.state)).toBe(0);
    });
<% } %>  });

  describe('Load<%= classify(name) %>', () =>{
    const action = new actions.Load<%= classify(name) %>();

    beforeEach(() => {
      store$.dispatch(action);
    });

    it('should set loading to true', () => {
      expect(get<%= classify(name) %>Loading(store$.state)).toBeTrue();
    });
<% if (entity) { %>
    describe('Load<%= classify(name) %>Success', () => {
      const <%= camelize(name) %> = [{ id: '1' }, { id: '2' }] as <%= classify(entity) %>[];
      const successAction = new actions.Load<%= classify(name) %>Success({ <%= camelize(name) %> });

      beforeEach(() => {
        store$.dispatch(successAction);
      });

      it('should set loading to false', () => {
        expect(get<%= classify(name) %>Loading(store$.state)).toBeFalse();
      });

      it('should not have an error when successfully loaded entities', () => {
        expect(get<%= classify(name) %>Error(store$.state)).toBeUndefined();
      });

      it('should have entites when successfully loading', () => {
        expect(get<%= classify(name) %>Entities(store$.state)).not.toBeEmpty();
        expect(get<%= classify(name) %>(store$.state)).not.toBeEmpty();
        expect(getNumberOf<%= classify(name) %>(store$.state)).toBe(2);
      });
    });

    describe('Load<%= classify(name) %>Fail', () => {
      const error = { error: 'ERROR' } as HttpError;
      const failAction = new actions.Load<%= classify(name) %>Fail({ error });

      beforeEach(() => {
        store$.dispatch(failAction);
      });

      it('should set loading to false', () => {
        expect(get<%= classify(name) %>Loading(store$.state)).toBeFalse();
      });

      it('should have an error when reducing', () => {
        expect(get<%= classify(name) %>Error(store$.state)).toBeTruthy();
      });

      it('should not have entites when reducing error', () => {
        expect(get<%= classify(name) %>Entities(store$.state)).toBeEmpty();
        expect(get<%= classify(name) %>(store$.state)).toBeEmpty();
        expect(getNumberOf<%= classify(name) %>(store$.state)).toBe(0);
      });
    });
<% } %>  });
});
