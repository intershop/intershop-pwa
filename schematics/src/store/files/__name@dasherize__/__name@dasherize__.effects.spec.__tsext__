import { TestBed } from '@angular/core/testing';
import { provideMockActions } from '@ngrx/effects/testing';
import { Action<% if (feature || extension) { %>, combineReducers<% } %> } from '@ngrx/store';
import { cold, hot } from 'jest-marbles';
import { Observable } from 'rxjs';

import { coreReducers } from 'ish-core/store/core-store.module';
<% if (feature) { %>import { <%= camelize(feature) %>Reducers } from 'ish-core/store/<%= dasherize(feature) %>/<%= dasherize(feature) %>-store.module';<% } else if (extension) { %>import { <%= camelize(extension) %>Reducers } from '../<%= dasherize(extension) %>-store.module';<% } %>
import { ngrxTesting } from 'ish-core/utils/dev/ngrx-testing';

import * as actions from './<%= dasherize(name) %>.actions';
import { <%= classify(name) %>Effects } from './<%= dasherize(name) %>.effects';

describe('<%= classify(name) %> Effects', () => {
  let actions$: Observable<Action>;
  let effects: <%= classify(name) %>Effects;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [
        ngrxTesting({ reducers: { ...coreReducers<% if (feature) { %>,
          <%= camelize(feature) %>: combineReducers(<%= camelize(feature) %>Reducers),<% } else if (extension) { %>,
          <%= camelize(extension) %>: combineReducers(<%= camelize(extension) %>Reducers),<% } %>
        }}),
      ],
      providers: [
        <%= classify(name) %>Effects,
        provideMockActions(() => actions$),
      ],
    });

    effects = TestBed.get(<%= classify(name) %>Effects);
  });

  describe('load<%= classify(name) %>$', () => {
    it('should not dispatch actions when encountering Load<%= classify(name) %>', () => {
      const action = new actions.Load<%= classify(name) %>();
      actions$ = hot('-a-a-a', { a: action });
      const expected$ = cold('------');

      expect(effects.load<%= classify(name) %>$).toBeObservable(expected$);
    });
  });
});
