/**
This is a Gradle Build wrapping the npm build and all testing for CI purposes.

The Bamboo Build Plan can be found here:
https://bamboo.intershop.de/browse/ISHMS-ISREST

A complete build like in the build plan can be started with:
./gradlew build -Dgeb.env=ci

Gradle is responsible for delegating the build to Node Package Manager (npm)
and afterwards starting a jetty instance for running end-to-end tests using
Geb+Spock. The steps are as follows:

1. `npmSetup` + `npmInstall` (tasks via gradle-node-plugin) for setting up node
   and npm. The binaries are then available in .gradle/nodejs/../bin.
   Afterwards `npm install` is run to setup node components.

2. `dist` runs `npm run build` for getting a deployment-ready distribution.

3. gretty plugin is used to start a jetty server serving the dist output as
   static resources for testing. The gretty plugin automatically starts the
   server before the `test` task and shuts down afterwards.

4. `test` executes end-to-end tests located in e2e/geb with Geb+Spock.
   In CI-Mode (-Dgeb.env=ci) the tests are run using PhantomJS. Otherwise
   Chrome is used. `test` can be run separately to only run Geb+Spock tests.

5. `karma` is a task for delegated running the `npm run test-ci` script which
   runs jasmine tests located in src/app with PhantomJS. The standard `check`
   task depends on `karma` so `build` triggers both `test` and `karma`
   execution. `karma` can be run separately to only run jasmine tests.
   Interactive development should be done using npm.

Utility tasks:
`reset` - delete node binaries and output from npm install

`npmRun -Pnpmargs="..." - run the embedded npm script with arguments in
                          space-separated list of commands in property `npmargs`

`appRun` - starts jetty using distribution output

`tslint` - runs static code analysis via angular cli on the project
`tslint -Pfix` - run tslint and fix fixable problems
*/

plugins {
    /** https://github.com/srs/gradle-node-plugin */
    id "com.moowork.node" version "1.1.1"
}

repositories {
    maven {
        url { 'http://rnd-repo/mvn-internal/' }
    }
}

/** Gretty Plugin for running jetty with static resources
http://akhikhl.github.io/gretty-doc/Getting-started.html  */
apply from:'https://raw.github.com/akhikhl/gretty/master/pluginScripts/gretty.plugin'
apply plugin:'groovy'

node {
    version = '6.11.2'
    npmVersion = '5.3.0'
    download = true
}

gretty {
    /** same as angular cli */
    httpPort = 4200
    integrationTestTask = 'test' // wrap gretty execution around `test`
    serverConfigFile = "$projectDir/e2e/geb/jetty9.xml"
}

task dist(type: NodeTask, dependsOn:npmInstall, description: 'build npm distribution to directory `dist`', group:'Node') {
    script = file("$projectDir/node_modules/@angular/cli/bin/ng")
    args = ['build', '--progress=false']
    inputs.dir('src')
    inputs.files(fileTree(dir: projectDir, includes : ['*.js', '*.json']))
    outputs.dir('dist')
}
test {
    systemProperty 'geb.env', System.getProperty('geb.env', 'local')
    systemProperty 'wdm.phantomjsDriverVersion', '2.1.1'
}

task karma(type: NodeTask, dependsOn:[npmInstall, dist], description: 'run jasmine tests', group:'Node') {
    script = file("$projectDir/node_modules/@angular/cli/bin/ng")
    args = ['test', '--progress=false', '--reporters', 'junit,html,spec', '--browsers', 'PhantomJS', '--single-run', '--no-color']
    inputs.files('src', 'package.json', 'karma-ci.conf.js')
}
check.dependsOn karma

task protractor(type: NodeTask, dependsOn:[npmInstall, dist], description: 'run protractor tests', group:'Node') {
    script = file("$projectDir/node_modules/@angular/cli/bin/ng")
    args = ['e2e', '--progress=false']
    inputs.files('e2e', 'src', 'package.json', 'protractor.conf.js')
}
/**
  TODO: this links protractor with gradle but Chrome headless needs to work first
 */
// check.dependsOn protractor

project.afterEvaluate {
    [test, appRun]*.dependsOn dist
    clean.dependsOn cleanDist
    appBeforeIntegrationTest.mustRunAfter dist
    protractor.mustRunAfter appAfterIntegrationTest
}

dependencies {
    testCompile "org.gebish:geb-spock:1.1.1"
    testCompile("org.spockframework:spock-core:1.0-groovy-2.4") {
        exclude group: "org.codehaus.groovy"
    }
    testCompile "org.codehaus.groovy:groovy-all:2.4.8"
    testCompile 'org.seleniumhq.selenium:selenium-api:3.4.0'

    testRuntime 'io.github.bonigarcia:webdrivermanager:1.6.2'
    testRuntime 'org.seleniumhq.selenium:selenium-chrome-driver:3.4.0'
    testRuntime 'org.seleniumhq.selenium:selenium-firefox-driver:3.4.0'
    testRuntime ('com.codeborne:phantomjsdriver:1.4.3') {
        // phantomjs driver pulls in a different selenium version
        transitive = false
    }
    testRuntime group: 'ch.qos.logback', name: 'logback-classic', version: '0.9.26'
}

sourceSets {
    /** relocations for geb+spock tests */
    test {
        java {
            srcDirs = ['e2e/geb/java']
        }
        groovy {
            srcDirs = ['e2e/geb/groovy']
        }
        resources {
            srcDirs = ['e2e/geb/resources']
        }
    }
}

/** logging configuration for geb+spock tests */
tasks.withType(Test) {
    testLogging {
        events "passed", "skipped", "failed", "standardOut"
        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events "started", "passed", "skipped", "failed", "standardOut", "standardError"
            exceptionFormat "full"
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat
    }
}

task reset(type:Delete, description:'delete node binaries and output from npm install', group:'Node Utility') {
    delete 'node_modules', '.gradle/npm', '.gradle/nodejs'
}
reset.finalizedBy clean

task npmRun(type:NpmTask, description: 'run npm script with space-separated commands from <npmargs> property, should not be run with gradle daemon', group:'Node Utility') {
    inputs.files(fileTree(dir: projectDir, includes: ['**/*.js', '**/*.ts', '**/*.json'], excludes: ['dist/**', 'node_modules/**'] ))
    doFirst {
        assert project.hasProperty('npmargs'), 'you did not pass the property npmargs'
        args = project.getProperty('npmargs').split(' ') as List
    }
}

task tslint(type:NpmTask, description:'run tslint', group:'Node Utility', dependsOn:npmInstall) {
    args = ['run', 'lint', '--silent']
    if (project.hasProperty('fix')) {
      args += ['--', '--fix']
    }
    inputs.files(file('src'), fileTree('tslint-rules') {include('**/*Rule.ts') include('tsconfig.json')}, fileTree(projectDir) {include('*.json')})
}
check.finalizedBy tslint
