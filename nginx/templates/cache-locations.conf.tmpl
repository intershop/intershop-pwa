{{- if and (getenv "CACHE" | strings.ToLower | regexp.Match "on|1|true|yes") (getenv "REDIS_URI") -}}
location /redis-fetch {
    internal;

    resolver local=on ipv6=off;
    resolver_timeout 5s;

    content_by_lua_block {
        local key = assert(ngx.var.arg_key, "no key found")

        local red = require("redis-integration").connect()
        local data, err = red:get(key)
        assert(red:set_keepalive(10000, 100))
        if err ~= nil then
            ngx.log(ngx.ERR, "Failed to get data from redis, error -> ", err)
            ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
        elseif data == ngx.null then
            ngx.exit(ngx.HTTP_NOT_FOUND)
        else
            ngx.print(data)
            ngx.exit(ngx.HTTP_OK)
        end
    }
}

location /redis-store {
    internal;

    resolver local=on ipv6=off;
    resolver_timeout 5s;

    content_by_lua_block {
        local value = assert(ngx.req.get_body_data(), "no value found")
        local key = assert(ngx.var.arg_key, "no key found")
        local exptime = assert(ngx.var.arg_exptime, "no exptime found")

        local red = require("redis-integration").connect()
        local ok, err = red:set(key, value)
        if not ok then
            ngx.log(ngx.ERR, "Failed to set data to redis, error -> ", err)
            ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
        else
            assert(red:expire(key, exptime))
            assert(red:set_keepalive(10000, 100))
            ngx.exit(ngx.HTTP_OK)
        end
    }
}
{{- end -}}
