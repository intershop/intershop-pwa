{
  "extends": [
    "rxjs-tslint-rules",
    "tslint-clean-code",
    "tslint-consistent-codestyle",
    "tslint-etc",
    "tslint-eslint-rules",
    "intershop-tslint-rules",
    "tslint-plugin-prettier",
    "tslint-config-prettier"
  ],
  "rulesDirectory": ["node_modules/codelyzer"],
  "rules": {
    "prettier": true,
    "no-extra-boolean-cast": true,
    "no-static-this": true,
    "no-unnecessary-type-annotation": true,
    "ish-no-object-literal-type-assertion": [
      true,
      "^((?!(/dev/|/tslint-rules/|spec\\.ts$)).)*$"
    ],
    "no-collapsible-if": true,
    "no-unused": true,
    "no-var-before-return": true,
    "no-return-undefined": true,
    "arrow-return-shorthand": [true, "multiline"],
    "only-arrow-functions": [true, "allow-named-functions"],
    "arrow-parens": [true, "ban-single-arg-parens"],
    "no-unnecessary-callback-wrapper": true,
    "no-unsafe-callback-scope": false,
    "no-commented-out-code": {
      "severity": "warning"
    },
    "no-consecutive-blank-lines": true,
    "callable-types": true,
    "class-name": true,
    "comment-format": [true, "check-space"],
    "curly": true,
    "ish-deprecation": {
      "severity": "warning"
    },
    "eofline": true,
    "forin": true,
    "import-blacklist": [true, "rxjs/Rx", "lodash", "."],
    "import-spacing": true,
    "indent": [true, "spaces", 2],
    "interface-over-type-literal": true,
    "type-literal-delimiter": true,
    "label-position": true,
    "max-line-length": [false, 140],
    "member-access": [true, "no-public"],
    "member-ordering": [
      true,
      {
        "order": [
          "static-field",
          "instance-field",
          "static-method",
          "instance-method"
        ]
      }
    ],
    "naming-convention": [
      // https://github.com/ajafff/tslint-consistent-codestyle/blob/master/docs/naming-convention.md
      true,
      {
        "type": "functionVariable",
        "modifiers": ["export", "const"],
        "format": "camelCase"
      },
      {
        "type": "type",
        "format": "PascalCase"
      },
      {
        "type": "enumMember",
        "format": "PascalCase"
      }
    ],
    "no-arg": true,
    "no-bitwise": true,
    "no-console": {
      "severity": "warning",
      "options": ["debug", "info", "time", "timeEnd", "trace", "log"]
    },
    "no-construct": true,
    "no-debugger": true,
    "no-duplicate-super": true,
    "no-empty": {
      "severity": "warning"
    },
    "no-empty-interface": {
      "severity": "warning"
    },
    "no-eval": true,
    "no-inferrable-types": [true, "ignore-params"],
    "no-angle-bracket-type-assertion": true,
    "no-misused-new": true,
    "new-parens": true,
    "no-non-null-assertion": true,
    "no-shadowed-variable": true,
    "no-string-literal": true,
    "no-string-throw": true,
    "no-switch-case-fall-through": true,
    "no-trailing-whitespace": true,
    "no-unnecessary-initializer": true,
    "no-unused-expression": true,
    "no-parameter-reassignment": true,
    "throw-error": true,
    "no-var-keyword": true,
    "object-literal-sort-keys": false,
    "object-literal-key-quotes": [true, "as-needed"],
    "one-line": [true, "check-catch", "check-else", "check-whitespace"],
    "one-variable-per-declaration": true,
    "prefer-const": true,
    "use-shorthand-property-in-object-creation": true,
    "radix": true,
    "rxjs-finnish": {
      "options": [
        {
          "functions": false,
          "methods": false,
          "parameters": false,
          "properties": false,
          "variables": true
        }
      ],
      "severity": "error"
    },
    "rxjs-no-create": true,
    "rxjs-no-ignored-replay-buffer": true,
    "rxjs-no-ignored-subscribe": true,
    "rxjs-no-internal": true,
    "rxjs-no-nested-subscribe": {
      "severity": "warning"
    },
    "rxjs-no-subclass": true,
    "rxjs-no-subject-unsubscribe": true,
    "rxjs-no-subject-value": true,
    "rxjs-no-unsafe-catch": true,
    "rxjs-no-unsafe-subject-next": true,
    "rxjs-no-unsafe-switchmap": true,
    "rxjs-no-unsafe-takeuntil": true,
    "rxjs-prefer-angular-takeuntil": {
      "severity": "warning",
      "options": {
        "checkDestroy": true,
        "checkDecorators": ["Component", "Pipe", "Directive"]
      }
    },
    "rxjs-no-explicit-generics": {
      "severity": "off"
    },
    "rxjs-no-ignored-observable": {
      "severity": "off"
    },
    "rxjs-no-exposed-subjects": {
      "severity": "off"
    },
    "rxjs-no-ignored-subscription": {
      "severity": "off"
    },
    "rxjs-no-unsafe-first": {
      "severity": "off"
    },
    "rxjs-no-unsafe-scope": {
      "severity": "off"
    },
    "rxjs-prefer-angular-async-pipe": {
      "severity": "off"
    },
    "rxjs-throw-error": {
      "severity": "off"
    },
    "private-destroy-field": true,
    "ngrx-use-empty-store-type": true,
    "semicolon": [true, "always"],
    "triple-equals": true,
    "typedef-whitespace": [
      true,
      {
        "call-signature": "nospace",
        "index-signature": "nospace",
        "parameter": "nospace",
        "property-declaration": "nospace",
        "variable-declaration": "nospace"
      }
    ],
    "unified-signatures": true,
    "ban-comma-operator": true,
    "no-boolean-literal-compare": true,
    "no-invalid-template-strings": true,
    "no-irregular-whitespace": true,
    "no-null-keyword": true,
    "variable-name": [true, "ban-keywords", "check-format"],
    "whitespace": [
      true,
      "check-branch",
      "check-decl",
      "check-operator",
      "check-separator",
      "check-type"
    ],
    "directive-selector": [true, "attribute", ["ish"], "camelCase"],
    "component-selector": [true, "element", ["ish"], "kebab-case"],
    "no-inputs-metadata-property": true,
    "no-assignment-to-inputs": true,
    "no-outputs-metadata-property": true,
    "use-component-change-detection": {
      "severity": "warning"
    },
    "no-host-metadata-property": true,
    "no-input-rename": true,
    "no-output-rename": true,
    "use-lifecycle-interface": true,
    "use-pipe-transform-interface": true,
    "component-class-suffix": true,
    "directive-class-suffix": true,
    "lifecycle-cyclomatic-complexity": {
      "severity": "warning",
      "options": {
        "ngOnInit": 2,
        "ngOnChanges": 3
      }
    },
    "ng-module-sorted-fields": {
      "severity": "error",
      "options": {
        "ignore-tokens": ["AppRouting", "storeDevtoolsModule"]
      }
    },
    "ish-ordered-imports": true,
    "ish-useful-imports": true,
    "force-jsdoc-comments": {
      "severity": "warning"
    },
    "newline-before-root-members": true,
    "no-duplicate-imports": true,
    "ban": [
      true,
      {
        "name": ["*", "ngOnInit"],
        "message": "Use fixture.detectChanges instead!"
      },
      {
        "name": ["*", "unsubscribe"],
        "message": "Do it another way: https://medium.com/@benlesh/rxjs-dont-unsubscribe-6753ed4fda87"
      },
      {
        "name": ["Object", "assign"],
        "message": "Use spread operator instead!"
      },
      {
        "name": ["*", "toBeDefined"],
        "message": "Most of the time this is the wrong assertion in tests!"
      },
      {
        "name": ["spyOn"],
        "message": "Use ts-mockito instead!"
      },
      {
        "name": ["atob"],
        "message": "This is not available in universal mode. Use https://github.com/jacobwgillespie/b64u"
      },
      {
        "name": ["btoa"],
        "message": "This is not available in universal mode. Use https://github.com/jacobwgillespie/b64u"
      }
    ],
    "ban-specific-imports": {
      "severity": "warning",
      "options": [
        {
          "import": "^Address$",
          "from": "^cluster$",
          "message": "Most likely you would've wanted to import the model instead."
        },
        {
          "import": "^Router$",
          "from": "^express$",
          "message": "Most likely you would've wanted to import the angular router instead.",
          "fix": "@angular/router"
        },
        {
          "from": "^[\\./]*/core/(.*)$",
          "message": "Use import alias ish-core",
          "fix": "ish-core/$1"
        },
        {
          "from": ".*node_modules/(.*)",
          "message": "import with 'node_modules' seems to be wrong",
          "fix": "$1"
        },
        {
          "from": ".*/src/.*",
          "message": "import with 'src' seems to be wrong"
        },
        {
          "from": "^(app|src)/.*",
          "message": "Transform into relative import, please."
        },
        {
          "from": ".*/dev/.*",
          "filePattern": "^((?!\\.spec\\.ts).)*$",
          "message": "Importing dev utility is only allowed in tests."
        },
        {
          "from": "(.*)/$",
          "message": "trailing '/' seems to be wrong",
          "fix": "$1"
        },
        {
          "from": "^\\.\\/(\\..*$)",
          "message": "unnecessary local folder reference",
          "fix": "$1"
        },
        {
          "from": "^(.*store\\/)(.*)\\/\\2.(actions|selectors)$",
          "message": "use aggregation import instead.",
          "fix": "$1$2"
        },
        {
          "from": "rxjs(?!($|/operators$))",
          "message": "deep import from rxjs seems to be wrong, use 'rxjs' or 'rxjs/operators'"
        },
        {
          "from": "ts-mockito/lib/ts-mockito",
          "message": "use import from 'ts-mockito'",
          "fix": "ts-mockito"
        },
        {
          "from": "@angular/common/http",
          "message": "http classes are not serializable and should therefor not be stored in ngrx related files",
          "filePattern": "(?!.*.spec.ts$).*/store/.*"
        },
        {
          "from": "@angular/common/http",
          "message": "http classes should not propagate to components",
          "filePattern": ".*\\.component\\..*ts"
        },
        {
          "starImport": true,
          "from": "^(\\.\\.|ish).*",
          "filePattern": ".*src/app.*",
          "message": "use star imports only for aggregation of deeper lying imports"
        },
        {
          "starImport": true,
          "from": "lodash.*"
        },
        {
          "import": "^(?!(range|uniq|memoize|once|groupBy|countBy|flatten|isEqual|intersection|pick)$).*",
          "from": "lodash.*",
          "filePattern": "^(?!.*.spec.ts$).*.ts$"
        },
        {
          "import": "CookiesService",
          "from": "ngx-utils-cookies-port",
          "filePattern": "^((?!src/app/core/utils/cookies/cookies\\.service(\\.spec)?\\.ts).)*$",
          "message": "Use CookiesService from ish-core instead."
        },
        {
          "import": "^FormsModule$",
          "from": "@angular/forms",
          "message": "This module is for the template-driven approach which we don't use."
        },
        {
          "from": "^(?!.*(\\.module|environments\\/environment)$)\\.\\..*$",
          "filePattern": "^(?!.*-routing\\.module\\.ts$).*\\.module\\.ts$",
          "message": "Modules should only aggregate deeper lying artifacts."
        },
        {
          "from": "^(?!.*\\.(module|guard)$)\\.\\..*$",
          "filePattern": ".*-routing\\.module\\.ts",
          "message": "Modules should only aggregate deeper lying artifacts."
        },
        {
          "from": ".*/extensions/.*",
          "filePattern": "^((?!(module|spec|environment\\.model)\\.ts).)*$",
          "message": "Imports from (other) extensions are not allowed here."
        },
        {
          "from": ".*/projects/.*",
          "filePattern": "^((?!(module|spec)\\.ts).)*$",
          "message": "Imports from (other) projects are not allowed here."
        },
        {
          "from": ".*/pages/[a-z][a-z0-9-]+/.*",
          "filePattern": "^((?!\\.module\\.ts$).)*$",
          "message": "Imports from pages are not allowed."
        },
        {
          "import": "^SharedModule$",
          "from": "\\..*",
          "filePattern": "^(?!.+(page|extensions/[a-z][a-z0-9-]+/[a-z][a-z0-9-]+\\.module|projects/[a-z][a-z0-9-]+/src/app(/[a-z][a-z0-9-]+)?\\.module)).+\\.module\\.ts$",
          "message": "SharedModule must only be imported in page, extension or project modules."
        },
        {
          "import": "pluck",
          "from": "rxjs/operators",
          "message": "This operator is not typesafe. Use 'mapToProperty' instead."
        },
        {
          "import": ".*",
          "from": ".*environments/environment.*",
          "filePattern": "^.*/app/((?!(app(.server)?.module|core/store/core/configuration/configuration\\.reducer|core/utils/state-transfer/state-properties\\.service|injection-keys)\\.ts).)*$",
          "message": "Importing environment is not allowed. Inject needed properties instead."
        },
        {
          "from": "(?!.*environments/environment.model)(.*environments/environment).+",
          "message": "Importing specific environments is not allowed. Use the default one.",
          "fix": "$1"
        },
        {
          "import": "^(StoreModule|EffectsModule)$",
          "from": "ngrx",
          "filePattern": "^.*\\.spec\\.ts*$",
          "message": "Use the testing helpers '*StoreModule.forTesting' in tests instead."
        },
        {
          "import": "^Effect$",
          "from": "@ngrx/effects",
          "filePattern": "^.*(\\.spec|\\.effects)\\.ts*$",
          "message": "The old way of declaring effects is deprecated, use 'createEffect'."
        },
        {
          "import": "^Action$",
          "from": "@ngrx/store",
          "filePattern": "^(?!.*\\.spec\\.ts$).*\\.actions\\.ts*$",
          "message": "The old way of declaring actions is deprecated, use 'createAction'."
        },
        {
          "import": "^props$",
          "from": "@ngrx/store",
          "filePattern": "^.*\\.actions\\.ts*$",
          "message": "Do not use 'props' directly with 'createAction', use our helper functions 'payload' and 'httpError' from 'ish-core/utils/action-creators' instead."
        },
        {
          "import": "^HttpError$",
          "from": ".*http-error.model",
          "filePattern": "^.*\\.actions\\.ts*$",
          "message": "Do not use 'HttpError' explicitly, please use 'httpError' from 'ish-core/utils/action-creators' instead."
        },
        {
          "import": "^IconModule$",
          "from": "ish-core/icon.module",
          "filePattern": "^.*\\.spec\\.ts*$",
          "message": "Use MockComponent(FaIconComponent) in tests instead."
        },
        {
          "import": "^FormsSharedModule$",
          "from": "ish-shared/forms/forms.module",
          "filePattern": "^.*\\.spec\\.ts*$",
          "message": "Performance: Use MockComponent for individual components in tests instead."
        },
        {
          "import": "^NO_ERRORS_SCHEMA$",
          "from": "@angular/core",
          "filePattern": "^.*\\.spec\\.ts*$",
          "message": "Use MockComponent for individual components in tests instead."
        },
        {
          "import": "^MockComponents$",
          "from": "ng-mocks",
          "filePattern": "^.*\\.spec\\.ts*$",
          "message": "Use MockComponent for individual components in tests instead."
        },
        {
          "import": "^PipesModule$",
          "from": "ish-core/pipes.module",
          "filePattern": "^.*\\.spec\\.ts*$",
          "message": "Performance: Use MockPipe or declare it individually in tests instead."
        },
        {
          "import": ".*",
          "from": "@ngx-meta.*",
          "filePattern": "^(?!.*/extensions/seo/.*$).*$",
          "message": "Imports from @ngx-meta are only allowed in SEO extension."
        },
        {
          "import": "User",
          "from": "@sentry/browser",
          "message": "You probably meant to import the ISH PWA user model."
        },
        {
          "import": "^createProductView$",
          "from": ".*/product-view.model",
          "filePattern": "^(?!.*/(.*\\.spec|products\\.selectors)\\.ts$).*$",
          "message": "Product views should not be attached to other entities. Use ShoppingFacade.product$ in components."
        },
        {
          "import": "SerializedRouterStateSnapshot",
          "from": "@ngrx/router-store",
          "message": "We customized the serialization of the router state. Use 'RouterState' from 'ish-core/store/core/router/router.reducer'."
        },
        {
          "import": "routerNavigatedAction|routerNavigationAction|ROUTER_NAVIGATED|ROUTER_NAVIGATION",
          "from": "@ngrx/router-store",
          "filePattern": "^.*\\.spec\\.ts*$",
          "message": "We customized the serialization of the router state. Use router actions from 'ish-core/utils/dev/routing' in tests."
        },
        {
          "import": "tap",
          "from": "rxjs/operators",
          "filePattern": "^(?!.*/store/(sentry-config/sentry-config|seo/seo|core/messages/messages)\\.effects\\.ts$).*\\.effects\\.ts*$",
          "message": "The usage of 'tap' in effects, if not related to 3rd party integrations, can usually be transformed properly into RxJS stream code."
        }
      ]
    },
    "ban-types": [
      true,
      ["Object", "Use {} instead."],
      ["Array", "Use [] instead."],
      ["String", "Use 'string'"],
      ["Boolean", "Use 'boolean'"],
      ["Number", "Use 'number'"],
      ["HttpErrorResponse", "HttpErrorResponse should not be used directly."]
    ],
    "no-suspicious-variable-init-in-tests": {
      "severity": "error",
      "options": {
        "exclude": ["actions$"]
      }
    },
    "meaningful-naming-in-tests": {
      "severity": "warning"
    },
    "prefer-method-signature": true,
    "prefer-switch": true,
    "prefer-template": {
      "severity": "warning",
      "options": ["allow-single-concat"]
    },
    "use-async-synchronization-in-tests": true,
    "use-jest-extended-matchers-in-tests": true,
    "use-new-async-in-tests": true,
    "do-not-use-then-with-testbed-in-tests": true,
    "no-any": {
      "severity": "warning"
    },
    "no-commented-out-tests": true,
    "no-focused-tests": true,
    "no-disabled-tests": {
      "severity": "warning"
    },
    "use-camel-case-environment-properties": true,
    "component-creation-test": true,
    "no-intelligence-in-artifacts": {
      "severity": "warning",
      "options": {
        "(component|pipe|directive)(\\.spec)?\\.ts$": {
          // "router": "Angular artifacts should rely use the Router directly.",
          "ngrx": "Angular artifacts should rely on facades only.",
          "service": "Angular artifacts should rely on facades only."
        },
        "effects.ts$": {
          "facade": "Effects should not use facades."
        },
        "^(?!.*/(utils)/.*$).*service.ts$": {
          // "ngrx": "Services should not use NgRx.",
          "router": "Services should not use the Angular Router."
        }
      }
    },
    "no-star-imports-in-store": {
      "severity": "warning"
    },
    "initialize-observables-in-ngoninit": true,
    "project-structure": {
      "severity": "warning",
      "options": {
        "warnUnmatched": false,
        "reusePatterns": {
          "name": "[a-z][a-z0-9]*(?:-[a-z][a-z0-9]*)*",
          "theme": "(?:\\.(?:default|blue))*"
        },
        "pathPatterns": [
          "^.*/src/environments/environment(\\.\\w+)?\\.ts$",
          "^.*/src/hybrid/default-url-mapping-table.ts$",
          // core
          "^.*/src/app/core/<name>\\.module(<theme>)?\\.ts",
          "^.*/src/app/core/configurations/.*",
          // custom routes
          "^.*/src/app/core/routing/(<name>)/\\1\\.route(<theme>)?\\.ts",
          "^.*/src/app/core/routing/(<name>)/\\1\\-route\\.pipe(<theme>)?\\.ts",
          // extra artifacts
          "^.*(/src/app/core|/src/app/extensions/<name>|projects/<name>/src/app)/(service)s/(<name>)/\\3(\\-<name>)?\\.\\2(<theme>)?\\.ts",
          "^.*(/src/app/core|/src/app/extensions/<name>|projects/<name>/src/app)/(interceptor|guard|directive|pipe|animation)s/<name>.\\2(<theme>)?\\.ts",
          "^.*projects/<name>/src/app/exports/index.ts",
          // models
          "^.*(/src/app/core|/src/app/extensions/<name>|projects/<name>/src/app)/models/(<name>)/\\2\\.(pipe|helper|interface|mapper|types)(<theme>)?\\.ts$",
          // facades
          "^.*(/src/app/core|/src/app/extensions/<name>|projects/<name>/src/app)/facades/(index|<name>\\.facade)(<theme>)?\\.ts$",
          // ngrx
          "^.*/store/(<name>/)?(<name>)/\\2(\\-<name>)?\\.(actions|effects|reducer|selectors)(<theme>)?\\.ts",
          "^.*/store/(<name>/)?<name>/index\\.ts",
          "^.*/store/(<name>)/\\1-store(\\.module)?(<theme>)?\\.ts",
          "^.*/(<name>)(/src/app)?/store/\\1-store(\\.module)?(<theme>)?\\.ts",
          // ngrx router-store
          "^.*/src/app/core/store/core/router/router\\.(operators|serializer)(<theme>)?\\.ts",
          // allow only app related content directly in src/app
          "^.*/src/app/app[\\w\\.\\-]+\\.ts$",
          // application shell
          "^.*/src/app/shell/(header|footer|application)/(<name>)/\\2\\.component(<theme>)?\\.ts$",
          "^.*/src/app/shell/<name>/configurations/.*\\.ts$",
          // specific (lazy loaded) page modules
          "^.*(/src/app|/src/app/extensions/<name>|projects/<name>/src/app)/pages/(<name>)/\\2-page\\.(module|component|guard)(<theme>)?\\.ts$",
          "^.*(/src/app|/src/app/extensions/<name>|projects/<name>/src/app)/pages/<name>/(<name>)/\\2\\.component(<theme>)?\\.ts$",
          "^.*/src/app/extensions/(<name>)/pages/\\1(.*)-routing\\.module(<theme>)?\\.ts$",
          "^.*/projects/(<name>)/src/app/pages/\\1-routing\\.module(<theme>)?\\.ts$",
          "^.*/src/app/pages/app(-<name>)*-routing\\.module(<theme>)?\\.ts$",
          // enforce folder structure for shared components
          "^.*/src/app/extensions/<name>/shared/(<name>)/\\1\\.component(<theme>)?\\.ts$",
          "^.*/src/app/extensions/<name>/shared/formly/(<name>)/\\1\\.component(<theme>)?\\.ts$",
          "^.*/src/app/shared/components/<name>/(<name>)/\\1\\.component(<theme>)?\\.ts$",
          "^.*/src/app/shared/components/<name>/(<name>)/\\1\\.component(<theme>)?\\.ts$",
          "^.*/src/app/shared/(<name>)/\\1\\.module(<theme>)?\\.ts$",
          "^.*/src/app/shared/<name>/(configurations|pipes|utils|validators|directives)/.*$",
          "^.*/src/app/shared/<name>/components/(<name>)/\\1\\.component(<theme>)?\\.ts$",
          "^.*/projects/<name>/src/app/components/(<name>)/\\1\\.component(<theme>)?\\.ts$",
          "^.*/src/app/shared/address-forms/components/(<name>)/\\1\\.factory(<theme>)?\\.ts$",
          // formly
          "^.*/src/app/shared/formly/(components|wrappers|types|extensions|utils|dev)/.*$",
          "^.*/src/app/pages/<name>/formly/.*$",
          // identity providers
          "^.*/src/app/core/identity-provider/.*$",
          // aggregation modules
          "^.*/src/app/(shell|shared)/\\1\\.module(<theme>)?\\.ts$",
          "^.*/src/app/extensions/(<name>)/\\1\\.module(<theme>)?\\.ts$",
          "^.*/projects/(<name>)/src/app/\\1\\.module(<theme>)?\\.ts$",
          // extension/projects exports
          "^.*(src/app/extensions/<name>/exports|projects/<name>/src/app/exports|src/app/shell/shared)/(lazy-<name>)/\\2\\.component(<theme>)?\\.ts$",
          "^.*/src/app/extensions/(<name>)/exports/\\1-product-context-display-properties/\\1-product-context-display-properties\\.service(<theme>)?\\.ts$",
          "^.*/src/app/extensions/(<name>)/exports/\\1-exports\\.module(<theme>)?\\.ts$",
          "^.*/src/app/extensions/<name>/exports/(<name>)/\\1\\.service(<theme>)?\\.ts$",
          "^.*/projects/(<name>)/src/app/exports/\\1-exports\\.module(<theme>)?\\.ts$"
        ],
        "patterns": [
          // root components
          {
            "name": "^(AppComponent)$",
            "file": "src/app/app\\.component(<theme>)?\\.ts$"
          },
          {
            "name": "^(AppServerModule)$",
            "file": "src/app/app\\.server\\.module(<theme>)?\\.ts$"
          },
          {
            "name": "^(App.*Routing)Module$",
            "file": "src/app/pages/<kebab>\\.module(<theme>)?\\.ts$"
          },
          // cms
          {
            "name": "^(CMS[A-Z].*Page)Component$",
            "file": ".*/<kebab>/<kebab>\\.component(<theme>)?\\.ts$"
          },
          // custom routing
          {
            "name": "^([A-Z].*)RoutePipe$",
            "file": ".*/core/routing/<kebab>/<kebab>-route\\.pipe(<theme>)?\\.ts$"
          },
          {
            "name": "^generate([A-Z].*)Url$",
            "file": ".*/core/routing/<kebab>/<kebab>.route(<theme>)?\\.ts$"
          },
          {
            "name": "^match([A-Z].*)Route$",
            "file": ".*/core/routing/<kebab>/<kebab>.route(<theme>)?\\.ts$"
          },
          {
            "name": "^of([A-Z].*)Route$",
            "file": ".*/core/routing/<kebab>/<kebab>.route(<theme>)?\\.ts$"
          },
          // angular components
          {
            "name": "^([A-Z].*)PageComponent$",
            "file": ".*/pages/<kebab>/<kebab>-page\\.component(<theme>)?\\.ts$"
          },
          {
            "name": "^(Test|Dummy)Component$",
            "file": ".*.ts$"
          },
          {
            "name": "^([A-Z].*)Component$",
            "file": ".*/<kebab>/<kebab>\\.component(<theme>)?\\.ts$"
          },
          {
            "name": "^([A-Z].*)Directive$",
            "file": ".*/directives/<kebab>\\.directive(<theme>)?\\.ts$"
          },
          {
            "name": "^([A-Z].*)PageGuard$",
            "file": ".*/pages/<kebab>/<kebab>-page\\.guard(<theme>)?\\.ts$"
          },
          {
            "name": "^([A-Z].*)Guard$",
            "file": ".*/guards/<kebab>\\.guard(<theme>)?\\.ts$"
          },
          {
            "name": "^([A-Z].*)Interceptor$",
            "file": ".*/interceptors/<kebab>\\.interceptor(<theme>)?\\.ts$"
          },
          // services
          {
            "name": "^([A-Z].*)ProductContextDisplayPropertiesService",
            "file": ".*/extensions/<kebab>/exports/<kebab>-product-context-display-properties/<kebab>-product-context-display-properties\\.service(<theme>)?\\.ts$"
          },
          {
            "name": "^([A-Z].*)Service$",
            "file": "(/utils.*|/services/<kebab>|/exports/<kebab>)/<kebab>\\.service(<theme>)?\\.ts$"
          },
          // modules and routing
          {
            "name": "^([A-Z].+)ExportsModule$",
            "file": ".*(/extensions/<kebab>|/projects/<kebab>/src/app)/exports/<kebab>-exports\\.module(<theme>)?\\.ts$"
          },
          {
            "name": "^([A-Z].+)SharedModule$",
            "file": ".*/shared/<name>/<kebab>\\.module(<theme>)?\\.ts$"
          },
          {
            "name": "^([A-Z].*)PageModule$",
            "file": ".*/<kebab>/<kebab>-page\\.module(<theme>)?\\.ts$"
          },
          {
            "name": "^([A-Z].*)RoutingModule$",
            "file": ".*/pages/<kebab>-routing\\.module(<theme>)?\\.ts$"
          },
          {
            "name": "^CoreStoreModule$",
            "file": ".*/core/store/core-store\\.module\\.ts$"
          },
          {
            "name": "^([A-Z].*)StoreModule$",
            "file": ".*/(<kebab>|store)/<kebab>-store\\.module(<theme>)?\\.ts$"
          },
          {
            "name": "^([A-Z].*)ComponentModule$",
            "file": ".*/<kebab>\\.component(<theme>)?\\.ts$"
          },
          {
            "name": "^(.*)Module$",
            "file": ".*(/<kebab>/<kebab>|/projects/<kebab>/src/app/<kebab>|/core/<name>)\\.module(<theme>)?\\.ts$"
          },
          {
            "name": "^(.*)Routes$",
            "file": ".*/<kebab>\\.module(<theme>)?\\.ts$"
          },
          // factory pattern
          {
            "name": "^([A-Z].*)Helper$",
            "file": ".*/models/<kebab>/<kebab>\\.helper(<theme>)?\\.ts$"
          },
          {
            "name": "^([A-Z].*)Mapper$",
            "file": ".*/models/<kebab>/<kebab>\\.mapper(<theme>)?\\.ts$"
          },
          {
            "name": "^([A-Z].*)BaseData$",
            "file": ".*/models/<kebab>/<kebab>\\.interface\\.ts$"
          },
          {
            "name": "^([A-Z].*)Data$",
            "file": ".*/models/<kebab>/<kebab>\\.interface\\.ts$"
          },
          // facades
          {
            "name": "^([A-Z].*)Facade$",
            "file": ".*(/src/app/core|/src/app/extensions/<name>|/projects/<name>/src/app)/facades/<kebab>\\.facade(<theme>)?\\.ts$"
          },
          // ngrx
          {
            "name": "^([A-Z].*)Effects$",
            "file": ".*/store/(<name>/)?<name>/<kebab>\\.effects(<theme>)?\\.ts$"
          },
          {
            "name": "^([a-z].*)Effects$",
            "file": ".*/store/(<kebab>/)?<kebab>-store\\.module(<theme>)?\\.ts$"
          },
          {
            "name": "^get(.*?)(Internal)?State$",
            "file": ".*/store/(<name>/)?(<kebab>/<kebab>\\.selectors|<kebab>-store)(<theme>)?\\.ts$"
          },
          {
            "name": "^([A-Z].*?)(Internal)?State$",
            "file": ".*/store/(<name>/)?(<kebab>/<kebab>\\.reducer|(<kebab>/)?<kebab>-store)(<theme>)?\\.ts$"
          },
          {
            "name": "^(initialState)$",
            "file": ".*/store/.*\\.reducer(<theme>)?\\.ts$"
          },
          {
            "name": "^([a-z].*)Reducer$",
            "file": ".*/store/(<name>/)?<kebab>/<kebab>\\.reducer(<theme>)?\\.ts$"
          },
          {
            "name": "^(metaReducers|[a-z]+MetaReducers)$",
            "file": ".*\\.module(<theme>)?\\.ts$"
          },
          {
            "name": "^([a-z].*)Reducers$",
            "file": ".*/store/(<kebab>/)?<kebab>-store\\.module(<theme>)?\\.ts$"
          },
          // environments
          {
            "name": "^(environment)$",
            "file": "src/environments/environment(\\.[a-z]+)?\\.ts$"
          }
        ],
        "ignoredFiles": [
          "server.ts$",
          "src/ssr/.*.ts",
          "src/[^/]*.ts$",
          ".*.spec.ts$",
          "tslint-rules/",
          "scripts/",
          "templates/",
          "utils/dev/",
          "core/utils/",
          ".*.actions.ts$",
          ".*.model.ts$",
          "store-devtools.module"
        ]
      }
    }
  }
}
