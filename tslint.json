{
  "extends": [
    "rxjs-tslint-rules",
    "tslint-clean-code",
    "tslint-consistent-codestyle",
    "tslint-etc",
    "intershop-tslint-rules"
  ],
  "rulesDirectory": [
    "node_modules/codelyzer",
    "node_modules/tslint-jasmine-rules/dist"
  ],
  "rules": {
    "no-static-this": true,
    "no-unnecessary-type-annotation": true,
    "no-collapsible-if": { "severity": "warning" },
    "no-unused": true,
    "no-var-before-return": true,
    "no-return-undefined": true,
    "arrow-return-shorthand": [true, "multiline"],
    "only-arrow-functions": [true, "allow-named-functions"],
    "arrow-parens": [true, "ban-single-arg-parens"],
    "no-unnecessary-callback-wrapper": { "severity": "warning" },
    "no-unsafe-callback-scope": false,
    "no-commented-out-code": { "severity": "warning" },
    "no-consecutive-blank-lines": true,
    "callable-types": true,
    "class-name": true,
    "comment-format": [
      true,
      "check-space"
    ],
    "curly": true,
    "deprecation": {
      "severity": "warn"
    },
    "eofline": true,
    "forin": true,
    "import-blacklist": [
      true,
      "rxjs/Rx",
      "."
    ],
    "import-spacing": true,
    "indent": [
      true,
      "spaces",
      2
    ],
    "interface-over-type-literal": true,
    "label-position": true,
    "max-line-length": [
      false,
      140
    ],
    "member-access": [
      true,
      "no-public"
    ],
    "member-ordering": [
      true,
      {
        "order": [
          "static-field",
          "instance-field",
          "static-method",
          "instance-method"
        ]
      }
    ],
    "naming-convention": [
      // https://github.com/ajafff/tslint-consistent-codestyle/blob/master/docs/naming-convention.md
      true,
      {"type": "functionVariable", "modifiers": ["export", "const"], "format": "camelCase"},
      {"type": "type", "format": "PascalCase"},
      {"type": "enumMember", "format": "PascalCase"}
    ],
    "no-arg": true,
    "no-bitwise": true,
    "no-console": { "severity": "warning", "options": [
      "debug",
      "info",
      "time",
      "timeEnd",
      "trace",
      "log"
    ]},
    "no-construct": true,
    "no-debugger": true,
    "no-duplicate-super": true,
    "no-empty": true,
    "no-empty-interface": true,
    "no-eval": true,
    "no-inferrable-types": [
      true,
      "ignore-params"
    ],
    "no-angle-bracket-type-assertion": true,
    "no-misused-new": true,
    "new-parens": true,
    "no-non-null-assertion": true,
    "no-shadowed-variable": true,
    "no-string-literal": true,
    "no-string-throw": true,
    "no-switch-case-fall-through": true,
    "no-trailing-whitespace": true,
    "no-unnecessary-initializer": true,
    "no-unused-expression": true,
    "no-unused-declaration": true,
    "no-parameter-reassignment": true,
    "throw-error": true,
    "no-use-before-declare": true,
    "no-var-keyword": true,
    "object-literal-sort-keys": false,
    "one-line": [
      true,
      "check-open-brace",
      "check-catch",
      "check-else",
      "check-whitespace"
    ],
    "one-variable-per-declaration": true,
    "prefer-const": true,
    "radix": true,
    "rxjs-no-add": true,
    "rxjs-no-operator": true,
    "rxjs-no-internal": true,
    "rxjs-finnish": {
      "options": [{
        "functions": false,
        "methods": false,
        "parameters": false,
        "properties": false,
        "variables": true
      }],
      "severity": "error"
    },
    "rxjs-no-create": { "severity": "off" },
    "rxjs-no-ignored-subscribe": { "severity": "warning" },
    "rxjs-no-patched": true,
    "rxjs-no-deep-operators": true,
    "rxjs-no-unsafe-switchmap": true,
    "rxjs-no-unsafe-catch": true,
    "rxjs-no-unsafe-scope": { "severity": "off" },
    "rxjs-no-unsafe-takeuntil": true,
    "semicolon": [
      true,
      "always"
    ],
    "triple-equals": true,
    "typedef-whitespace": [
      true,
      {
        "call-signature": "nospace",
        "index-signature": "nospace",
        "parameter": "nospace",
        "property-declaration": "nospace",
        "variable-declaration": "nospace"
      }
    ],
    "unified-signatures": true,
    "ban-comma-operator": true,
    "no-invalid-template-strings": true,
    "no-null-keyword": true,
    "variable-name": [true, "ban-keywords", "check-format"],
    "whitespace": [
      true,
      "check-branch",
      "check-decl",
      "check-operator",
      "check-separator",
      "check-type"
    ],
    "directive-selector": [
      true,
      "attribute",
      "ish",
      "camelCase"
    ],
    "component-selector": [
      true,
      "element",
      "ish",
      "kebab-case"
    ],
    "use-input-property-decorator": true,
    "use-output-property-decorator": true,
    "use-component-change-detection": { "severity": "warning" },
    "use-host-property-decorator": true,
    "no-input-rename": true,
    "no-output-rename": true,
    "use-life-cycle-interface": true,
    "use-pipe-transform-interface": true,
    "component-class-suffix": true,
    "directive-class-suffix": true,
    "local-imports-format": [ true, "TypeScriptHeroPlugin" ],
    "ordered-imports": true,
    "no-duplicate-imports": true,
    "ban": [
      true,
      {"name": ["*", "ngOnInit"], "message": "Use fixture.detectChanges instead!"},
      {"name": ["*", "unsubscribe"], "message": "Do it another way: https://medium.com/@benlesh/rxjs-dont-unsubscribe-6753ed4fda87"},
      {"name": ["*", "toBeDefined"], "message": "Most of the time this is the wrong assertion in tests!"},
      {"name": ["spyOn"], "message": "Use ts-mockito instead!"},
      {"name": ["*", "select"], "message": "Use store.pipe(select()) instead!"}
    ],
    "ban-specific-imports": [
      true,
      { "import": "Router(Go|Back|Forward)", "from": "ngrx-router", "message": "We don't use router actions from ngrx-router. Use routing with router.navigate()." }
    ],
    "no-suspicious-variable-init-in-tests": {
      "severity": "error",
      "options": {
        "exclude": [ "actions$" ]
      }
    },
    "meaningful-naming-in-tests": { "severity": "warning" },
    "use-async-synchronisation-in-tests": true,
    "use-jest-extended-matchers-in-tests": true,
    "no-any": { "severity": "warning" },
    "no-commented-out-tests": true,
    "no-focused-tests": true,
    "no-disabled-tests": { "severity": "warning" },
    "prefer-mocks-instead-of-stubs-in-tests": true,
    "no-barrel-files": true,
    "do-not-import-environment": true,
    "use-camel-case-environment-properties": true,
    "dev-util-imports": true,
    "component-creation-test": true,
    "ccp-no-intelligence-in-components": {
      "severity": "warning",
      "options": {
        // forbid every logic in components
        "component": {
          "ngrx": false,
          "service": false
        },
        "container": {
          "ngrx": true,
          // services should only be used by effects
          "service": false
        }
      }
    },
    "ccp-no-markup-in-containers": {
      "severity": "warning",
      "options": {
        "patterns": [ "<img", "<ul", "<li", "<table", "<(?![^>]*(clearfix|-panel))[^>]*class" ]
      }
    },
    "project-structure": {
      "severity": "warning",
      "options": {
        "warnUnmatched": false,
        "pathPatterns": [
          "^.*/e2e/.*$",
          "^.*/src/environments/environment(\\.\\w+|)\\.ts$",
          // unmanaged folders
          "^.*/src/app/(utils/).*\\.ts$",
          // model
          "^.*/src/app/models/(.*)/\\1\\.(pipe|helper|interface|mapper|types)\\.ts$",
          // allow only module declaration in module folders
          "^.*/src/app/\\w+/[\\w\\.\\-]+\\.module\\.ts$",
          // allow only app related content directly in src/app
          "^.*/src/app/app[\\w\\.\\-]+\\.ts$",
          // enforce specific folder structure for modules
          "^.*/src/app/[a-z][a-z0-9-]+/(components/|containers/|store/|directives/|validators/|services/|interceptors/|guards/|configurations/|pipes/)(.*/|)[\\w\\.\\-]+\\.(ts|html)$",
          // forms and shared may have submodules
          "^.*/src/app/(forms|shared)/[a-z][a-z0-9-]+/(components/|containers/|directives/|validators/|services/|interceptors/|guards/|configurations/|pipes/|utils/)(.*/|)[\\w\\.\\-]+\\.(ts|html)$"
        ],
        "patterns": [
          // root components
          { "name": "^(AppComponent)$", "file": "src/app/app\\.component\\.ts$" },
          { "name": "^(AppServerModule)$", "file": "src/app/app\\.server\\.module\\.ts$" },
          // angular components
          { "name": "^(.*)ContainerComponent$", "file": ".*/containers(/.*|)/<kebab>/<kebab>\\.container\\.ts$" },
          { "name": "^(.*)Component$", "file": ".*/components(/.*|)/<kebab>/<kebab>\\.component\\.ts$" },
          { "name": "^(.*)Directive$", "file": ".*/directives/<kebab>\\.directive\\.ts$" },
          { "name": "^(.*)Guard$", "file": ".*/guards/<kebab>\\.guard\\.ts$" },
          { "name": "^(.*)Interceptor$", "file": ".*/interceptors/<kebab>\\.interceptor\\.ts$" },
          // services
          { "name": "^(.*)Service$", "file": "/services(/.*|)/<kebab>\\.service\\.ts$" },
          // modules and routing
          { "name": "^(.*)Module$", "file": ".*/<kebab>\\.module\\.ts$" },
          { "name": "^(.*Page)Routes$", "file": ".*/containers(/.*|)/<kebab>/<kebab>\\.routes\\.ts$" },
          { "name": "^(routes)$", "file": ".*/.*\\-routing\\.module\\.ts$" },
          // form specific factories
          { "name": "^(AddressForm.*)Factory$", "file": ".*src/app/forms/.*/components/<kebab>/<kebab>\\.factory\\.ts$" },
          // factory pattern
          { "name": "^([A-Z].*)Helper$", "file": ".*/models/<kebab>/<kebab>\\.helper\\.ts$" },
          { "name": "^([A-Z].*)Mapper$", "file": ".*/models/<kebab>/<kebab>\\.mapper\\.ts$" },
          { "name": "^([A-Z].*)Data$", "file": ".*/models/<kebab>/<kebab>\\.interface\\.ts$" },
          // ngrx
          { "name": "^([A-Z].*)Effects$", "file": ".*/store/<kebab>/<kebab>\\.effects\\.ts$" },
          { "name": "^([a-z].*)Effects$", "file": ".*/store/<kebab>\\.system\\.ts$" },
          { "name": "^get(.*)State$", "file": ".*/store/(<kebab>/<kebab>\\.selectors|<kebab>\\.state)\\.ts$" },
          { "name": "^([A-Z].*)State$", "file": ".*/store/(<kebab>/<kebab>\\.reducer|<kebab>\\.state)\\.ts$" },
          { "name": "^(initialState)$", "file": ".*/store/.*\\.reducer\\.ts$" },
          { "name": "^((get|is)[A-Z].*)$", "file": ".*/(store/.*\\.(reducer|selectors)|factories)\\.ts$" },
          { "name": "^(.*)Reducer$", "file": ".*/store/<kebab>/<kebab>\\.reducer\\.ts$" },
          { "name": "^(metaReducers)$", "file": ".*\\.module\\.ts$" },
          { "name": "^([a-z].*)Reducers$", "file": ".*/store/<kebab>\\.system\\.ts$" },
          // environments
          { "name": "^(environment)$", "file": "src/environments/environment(\\.[a-z]+|)\\.ts$" },
          // e2e
          { "name": "^([A-Z].*)Page$", "file": ".*/pages(/.*|)/<kebab>\\.page\\.ts$" }
        ],
        "ignoredFiles": [
          "/(prerender|server).ts$",
          "src/[^\/]*.ts$",
          ".*.spec.ts$",
          "/tslint-rules/",
          "/utils/dev/",
          ".*.actions.ts$",
          ".*.model.ts$"
        ]
      }
    }
  }
}
