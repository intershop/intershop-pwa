{
  // Place your proof-of-concept workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  "DummyComponent for Testing": {
    "scope": "typescript",
    "prefix": "ish-testing-dummy-component",
    "body": [
      "@Component({ template: 'dummy' })",
      "class DummyComponent {}",
      "$1"
    ],
    "description": "Insert DummyComponent for Testing"
  },
  "ts-mockito Provider with instance & mock": {
    "scope": "typescript",
    "prefix": "ish-provider-ts-mockito",
    "body": ["{ provide: $1, useFactory: () => instance(mock($1)) }"],
    "description": "Insert ts-mockito provider for Testing"
  },
  "Test EventEmitter with ts-mockito": {
    "scope": "typescript",
    "prefix": "ish-test-eventemitter-ts-mockito",
    "body": [
      "const emitter = spy($1);",
      "",
      "verify(emitter.emit(anything())).once();",
      "const [arg] = capture(emitter.emit).last();",
      "expect(arg).toMatchInlineSnapshot();"
    ]
  }
}
