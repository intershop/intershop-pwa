stages:
  - setup
  - build
  - e2e
  - publish
  - distribute
  - deploy

variables:
  npm_config_cache: "$CI_PROJECT_DIR/cache/.npm"
  CYPRESS_CACHE_FOLDER: "$CI_PROJECT_DIR/cache/Cypress"

setup:
  image: node:8.11.4-stretch
  stage: setup
  cache:
    policy: pull-push
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - cache
      - node_modules
  except:
    refs:
      - develop
  tags:
    - docker-executor
  script:
    - node --version && npm --version
    - bash -c "cd tslint-rules ; npm run build"
    - bash .gitlab-ci-test-no-changes.sh 'you probably did not commit compiled binaries in tslint-rules'
    - npm install --prefer-offline
    - bash .gitlab-ci-test-no-changes.sh 'you probably did not commit package-lock.json after installing packages'
    - echo "setup complete"

test:
  image: node:8.11.4-stretch
  stage: build
  cache:
    policy: pull
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - cache
      - node_modules
  except:
    refs:
      - develop
  tags:
    - docker-executor
  artifacts:
    reports:
      junit: reports/junit.xml
  coverage: '/^Statements\s*:\s*([^%]+)/'
  script:
    - test -d node_modules || npm install --prefer-offline
    - npx jest -c jest-reports.config.js --ci
    - echo "build complete"

compile:
  image: node:8.11.4-stretch
  stage: build
  cache:
    policy: pull
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - cache
      - node_modules
  except:
    refs:
      - develop
  tags:
    - docker-executor
  script:
    - test -d node_modules || npm install --prefer-offline
    - npx ng build --aot --progress=false
    - npx tsc -p src/tsconfig.spec.json
    - echo "build complete"

codestyle:
  image: node:8.11.4-stretch
  stage: build
  cache:
    policy: pull
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - cache
      - node_modules
  except:
    refs:
      - develop
  tags:
    - docker-executor
  script:
    - test -d node_modules || npm install --prefer-offline
    - npm run lint -- --format stylish
    - npm run format
    - bash .gitlab-ci-test-no-changes.sh 'you probably committed unformatted code'
    - echo "build complete"

e2e:
  image: cypress/browsers:chrome67
  stage: e2e
  cache:
    policy: pull
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - cache
      - node_modules
  except:
    refs:
      - develop
  tags:
    - docker-executor
  services:
    - name: registry.intershop.de/ispwa/intershop7-devenv/master/a_responsive
      alias: icm
  artifacts:
    reports:
      junit: reports/e2e-*.xml
    when: on_failure
    expire_in: 2 weeks
    paths:
      - cypress/screenshots
  script:
    - test -d node_modules || npm install --prefer-offline
    - node --version && npm --version
    - npm run build:dynamic:prod
    - export ICM_BASE_URL=http://icm:8081 DISPLAY=:5
    - wget --wait 10 --tries 30 --retry-connrefused ${ICM_BASE_URL}/INTERSHOP/rest/WFS/inSPIRED-inTRONICS-Site/-
    - nohup bash -c "Xvfb ${DISPLAY} &"
    - nohup bash -c "npm run serve:dynamic &"
    - wget -q --wait 10 --tries 30 --retry-connrefused http://localhost:4200
    - sh .gitlab-ci-test-universal.sh
    - npx cypress run -b chrome -e ICM_BASE_URL=${ICM_BASE_URL} -c "baseUrl=http://localhost:4200" -r junit --reporter-options 'mochaFile=reports/e2e-remote-[hash]-report.xml'
    - nohup bash -c "npx ng serve --aot --progress false --port 4400 &"
    - wget -q --wait 10 --tries 30 --retry-connrefused http://localhost:4400
    - npx cypress run -b chrome -e ICM_BASE_URL=${ICM_BASE_URL} -c "baseUrl=http://localhost:4400,integrationFolder=cypress/integration/local" -r junit --reporter-options 'mochaFile=reports/e2e-local-[hash]-report.xml'
    - echo "E2E complete"

.job-template: &job_definition
  stage: publish
  retry: 2
  only:
    refs:
      - develop
  tags:
  - shell-executor
  - docker
  script:
  - docker build -t ${CI_REGISTRY_IMAGE}/${ENVIRONMENT}:${CI_BUILD_REF}
           --build-arg env=${ENVIRONMENT}
           --label environment="${ENVIRONMENT}"
           --label revision="${CI_BUILD_REF}"
           --label project="${CI_PROJECT_URL}"
           .
  - test -z "${CI_JOB_TOKEN}" || docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
  - docker push ${CI_REGISTRY_IMAGE}/${ENVIRONMENT}:${CI_BUILD_REF}
  - docker tag ${CI_REGISTRY_IMAGE}/${ENVIRONMENT}:${CI_BUILD_REF} ${CI_REGISTRY_IMAGE}/${ENVIRONMENT}:latest
  - docker push ${CI_REGISTRY_IMAGE}/${ENVIRONMENT}:latest

push_dev:
  <<: *job_definition
  variables:
    ENVIRONMENT: "dev"

push_prod:
  <<: *job_definition
  variables:
    ENVIRONMENT: "prod"

push_reports:
  stage: publish
  only:
    refs:
      - develop
  allow_failure: true
  tags:
  - shell-executor
  - docker
  - performance
  script:
  - docker build -t ${CI_REGISTRY_IMAGE}/reports:${CI_BUILD_REF}
           --build-arg ICM_BASE_URL=${ICM_BASE_URL}
           --label revision="${CI_BUILD_REF}"
           --label project="${CI_PROJECT_URL}"
           --file Dockerfile_reports
           .
  - test -z "${CI_JOB_TOKEN}" || docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
  - docker push ${CI_REGISTRY_IMAGE}/reports:${CI_BUILD_REF}
  - docker tag ${CI_REGISTRY_IMAGE}/reports:${CI_BUILD_REF} ${CI_REGISTRY_IMAGE}/reports:latest
  - docker push ${CI_REGISTRY_IMAGE}/reports:latest

pull_images:
  stage: distribute
  only:
    refs:
      - develop
  tags:
  - shell-executor
  - docker
  - demoserver
  script:
  - test -z "${CI_JOB_TOKEN}" || docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
  - docker pull "${CI_REGISTRY_IMAGE}/reports:${CI_BUILD_REF}"
  - docker pull "${CI_REGISTRY_IMAGE}/prod:${CI_BUILD_REF}"

deploy_demo:
  stage: deploy
  only:
    refs:
      - develop
  tags:
  - shell-executor
  - docker
  - chuck-norris-swarm-manager
  variables:
    SERVICE: "intershop-pwa"
    IMAGE: "${CI_REGISTRY_IMAGE}/prod:${CI_BUILD_REF}"
  script: 
  - test -z "${CI_JOB_TOKEN}" || docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
  - docker service create --with-registry-auth --replicas $SERVICE_REPLICAS --publish mode=host,target=4200,published=4321 --name ${SERVICE} --env ICM_BASE_URL=$ICM_BASE_URL --env LOGGING=true ${IMAGE} || docker service update --with-registry-auth --image ${IMAGE} --env-add ICM_BASE_URL=$ICM_BASE_URL --env-add LOGGING=true --force --replicas $SERVICE_REPLICAS --update-delay 0s --update-parallelism 0 --update-order stop-first --update-failure-action continue ${SERVICE}
  environment:
    name: demo
    url: http://jdevbuildslave01.rnd.j.intershop.de:4321

deploy_reports:
  stage: deploy
  only:
    refs:
      - develop
  allow_failure: true
  tags:
  - shell-executor
  - docker
  - chuck-norris-swarm-manager
  variables:
    SERVICE: "intershop-pwa-reports"
    IMAGE: "${CI_REGISTRY_IMAGE}/reports:${CI_BUILD_REF}"
  script: 
  - test -z "${CI_JOB_TOKEN}" || docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
  - docker service create --with-registry-auth --constraint node.hostname==jdevbuildslave01.rnd.j.intershop.de --publish mode=host,target=8080,published=4324 --name ${SERVICE} ${IMAGE} || docker service update --with-registry-auth --image ${IMAGE} ${SERVICE}
  environment:
    name: reports
    url: http://jdevbuildslave01.rnd.j.intershop.de:4324
