stages:
  - build
  - e2e
  - publish
  - distribute
  - deploy

build:
  stage: build
  except:
    refs:
      - develop
  tags:
  - shell-executor
  - docker
  script: docker build --file Dockerfile_build .

e2e:
  stage: e2e
  except:
    refs:
      - develop
  tags:
  - shell-executor
  - docker
  - performance
  script: docker build --file Dockerfile_e2e --build-arg ICM_BASE_URL=${ICM_BASE_URL} .

.job-template: &job_definition
  stage: publish
  retry: 2
  only:
    refs:
      - develop
  tags:
  - shell-executor
  - docker
  script:
  - docker build -t ${CI_REGISTRY_IMAGE}/${ENVIRONMENT}:${CI_BUILD_REF}
           --build-arg env=${ENVIRONMENT}
           --label environment="${ENVIRONMENT}"
           --label revision="${CI_BUILD_REF}"
           --label project="${CI_PROJECT_URL}"
           .
  - test -z "${CI_JOB_TOKEN}" || docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
  - docker push ${CI_REGISTRY_IMAGE}/${ENVIRONMENT}:${CI_BUILD_REF}
  - docker tag ${CI_REGISTRY_IMAGE}/${ENVIRONMENT}:${CI_BUILD_REF} ${CI_REGISTRY_IMAGE}/${ENVIRONMENT}:latest
  - docker push ${CI_REGISTRY_IMAGE}/${ENVIRONMENT}:latest

push_dev:
  <<: *job_definition
  variables:
    ENVIRONMENT: "dev"

push_prod:
  <<: *job_definition
  variables:
    ENVIRONMENT: "prod"

push_reports:
  stage: publish
  only:
    refs:
      - develop
  allow_failure: true
  tags:
  - shell-executor
  - docker
  - performance
  script:
  - docker build -t ${CI_REGISTRY_IMAGE}/reports:${CI_BUILD_REF}
           --build-arg ICM_BASE_URL=${ICM_BASE_URL}
           --label revision="${CI_BUILD_REF}"
           --label project="${CI_PROJECT_URL}"
           --file Dockerfile_reports
           .
  - test -z "${CI_JOB_TOKEN}" || docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
  - docker push ${CI_REGISTRY_IMAGE}/reports:${CI_BUILD_REF}
  - docker tag ${CI_REGISTRY_IMAGE}/reports:${CI_BUILD_REF} ${CI_REGISTRY_IMAGE}/reports:latest
  - docker push ${CI_REGISTRY_IMAGE}/reports:latest

pull_images:
  stage: distribute
  only:
    refs:
      - develop
  tags:
  - shell-executor
  - docker
  - demoserver
  script:
  - test -z "${CI_JOB_TOKEN}" || docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
  - docker pull "${CI_REGISTRY_IMAGE}/reports:${CI_BUILD_REF}"
  - docker pull "${CI_REGISTRY_IMAGE}/prod:${CI_BUILD_REF}"

deploy_demo:
  stage: deploy
  only:
    refs:
      - develop
  tags:
  - shell-executor
  - docker
  - chuck-norris-swarm-manager
  variables:
    SERVICE: "intershop-pwa"
    IMAGE: "${CI_REGISTRY_IMAGE}/prod:${CI_BUILD_REF}"
  script: 
  - test -z "${CI_JOB_TOKEN}" || docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
  - docker service create --with-registry-auth --replicas $SERVICE_REPLICAS --publish mode=host,target=4200,published=4321 --name ${SERVICE} --env ICM_BASE_URL=$ICM_BASE_URL --env LOGGING=true ${IMAGE} || docker service update --with-registry-auth --image ${IMAGE} --env-add ICM_BASE_URL=$ICM_BASE_URL --env-add LOGGING=true --force --replicas $SERVICE_REPLICAS --update-delay 0s --update-parallelism 0 --update-order stop-first --update-failure-action continue ${SERVICE}
  environment:
    name: demo
    url: http://jdevbuildslave01.rnd.j.intershop.de:4321

deploy_reports:
  stage: deploy
  only:
    refs:
      - develop
  allow_failure: true
  tags:
  - shell-executor
  - docker
  - chuck-norris-swarm-manager
  variables:
    SERVICE: "intershop-pwa-reports"
    IMAGE: "${CI_REGISTRY_IMAGE}/reports:${CI_BUILD_REF}"
  script: 
  - test -z "${CI_JOB_TOKEN}" || docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
  - docker service create --with-registry-auth --constraint node.hostname==jdevbuildslave01.rnd.j.intershop.de --publish mode=host,target=8080,published=4324 --name ${SERVICE} ${IMAGE} || docker service update --with-registry-auth --image ${IMAGE} ${SERVICE}
  environment:
    name: reports
    url: http://jdevbuildslave01.rnd.j.intershop.de:4324
