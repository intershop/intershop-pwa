stages:
  - mrconfig
  - setup
  - build
  - publish
  - deploy
  - e2e
  - verify

variables:
  npm_config_cache: '$CI_PROJECT_DIR/cache/.npm'

cache:
  key: ${CI_COMMIT_REF_SLUG}
  untracked: false
  paths:
    - cache

cancel_old_pipelines:
  cache: {}
  dependencies: []
  image: endeveit/docker-jq
  stage: mrconfig
  only:
    - merge_requests
  tags:
    - docker-executor
  script:
    - sh .gitlab-ci-cancel-old-pipelines.sh
    - echo "cancel complete"

setup:
  image: node:10
  stage: setup
  only:
    - merge_requests
  except:
    refs:
      - develop
      - master
  tags:
    - docker-executor
    - performance
  script:
    - node --version && npm --version
    - bash -c "cd tslint-rules ; npm --silent run build"
    - bash .gitlab-ci-test-no-changes.sh 'you probably did not commit compiled binaries in tslint-rules'
    - bash -c "cd schematics ; npm --silent run build"
    - bash .gitlab-ci-test-no-changes.sh 'you probably did not commit compiled binaries in schematics'
    - npm i && npm i
    - bash .gitlab-ci-test-no-changes.sh 'you probably did not commit package-lock.json correctly after installing packages, run npm i again'
    - echo "setup complete"

jest_test:
  image: node:10
  stage: build
  only:
    - merge_requests
  except:
    refs:
      - develop
      - master
  tags:
    - docker-executor
    - performance
  artifacts:
    paths:
      - reports/coverage
    expire_in: 1 day
    reports:
      junit: reports/junit.xml
  dependencies: []
  coverage: '/^Statements\s*:\s*([^%]+)/'
  script:
    - npm ci --prefer-offline
    - npx jest -c jest-reports.config.js --ci
    - echo "build complete"

compile:
  image: node:10
  stage: build
  only:
    - merge_requests
  except:
    refs:
      - develop
      - master
  tags:
    - docker-executor
    - performance
  dependencies: []
  script:
    - npm ci --prefer-offline
    - npx tsc -p src/tsconfig.spec.json
    - cd e2e
    - npm ci
    - npx tsc -p cypress/tsconfig.json
    - echo "build complete"

codestyle:
  image: node:10
  stage: build
  only:
    - merge_requests
  except:
    refs:
      - develop
      - master
  tags:
    - docker-executor
    - performance
  artifacts:
    expire_in: 1 day
    paths:
      - reports/jscpd
      - reports/tslint
  dependencies: []
  script:
    - npm ci --prefer-offline
    - npm i --no-save tslint-html-report jscpd-html-reporter
    - node reports/tslint-report
    - node reports/jscpd-report
    - npm run lint -- --format stylish
    - npm run format
    - bash .gitlab-ci-test-no-changes.sh 'you probably committed unformatted code'
    - echo "build complete"

deploy_review_mock:
  cache: {}
  dependencies: []
  stage: build
  only:
    refs:
      - merge_requests
  tags:
    - shell-executor
    - docker
    - performance
    - demoserver
  script:
    - docker info --format '{{json .Name}}' || (export DOCKER_HOST=tcp://localhost:2375/ DOCKER_DRIVER=overlay2 && docker info --format '{{json .Name}}') || (export DOCKER_HOST=tcp://docker:2375/ DOCKER_DRIVER=overlay2 && docker info --format '{{json .Name}}')
    - docker build -t ${CI_REGISTRY_IMAGE}:mock-${CI_BUILD_REF}
      --file=templates/Dockerfile_dev
      .
    - docker rm -f "${CI_COMMIT_REF_SLUG}-mock" || true
    - docker run
      --detach
      --publish-all
      --name "${CI_COMMIT_REF_SLUG}-mock"
      ${CI_REGISTRY_IMAGE}:mock-${CI_BUILD_REF}
  environment:
    name: review/mock-$CI_COMMIT_REF_SLUG
    url: http://$DEMO_SERVER_NAME:3000/${CI_COMMIT_REF_SLUG}-mock
    on_stop: stop_review_mock

stop_review_mock:
  stage: build
  cache: {}
  dependencies: []
  when: manual
  tags:
    - shell-executor
    - docker
    - demoserver
  only:
    - merge_requests
  variables:
    GIT_STRATEGY: none
  script:
    - docker rm -f "${CI_COMMIT_REF_SLUG}-mock" || true
  environment:
    name: review/mock-$CI_COMMIT_REF_SLUG
    action: stop

publish_pwa:
  cache: {}
  dependencies: []
  image: docker:stable
  stage: build
  only:
    refs:
      - develop
      - tags
      - merge_requests
  tags:
    - shell-executor
    - docker
    - performance
  services:
    - docker:dind
  script:
    - VERSION="$(grep "version" package.json | grep -Eo '[0-9][^"]*')"
    - docker info --format '{{json .Name}}' || (export DOCKER_HOST=tcp://localhost:2375/ DOCKER_DRIVER=overlay2 && docker info --format '{{json .Name}}') || (export DOCKER_HOST=tcp://docker:2375/ DOCKER_DRIVER=overlay2 && docker info --format '{{json .Name}}')
    - docker build -t ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}-${CI_BUILD_REF}
      --build-arg displayVersion="$VERSION ($CI_COMMIT_REF_NAME @ $CI_COMMIT_SHA)"
      --label environment="production"
      --label revision="${CI_BUILD_REF}"
      --label project="${CI_PROJECT_URL}"
      .
    - test -z "${CI_JOB_TOKEN}" || docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - test -z "${CI_JOB_TOKEN}" || docker push ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}-${CI_BUILD_REF}

publish_pwa_latest:
  cache: {}
  dependencies: []
  image: docker:stable
  stage: publish
  only:
    - tags
  tags:
    - docker-executor
    - performance
  services:
    - docker:dind
  script:
    - docker info --format '{{json .Name}}' || (export DOCKER_HOST=tcp://localhost:2375/ DOCKER_DRIVER=overlay2 && docker info --format '{{json .Name}}') || (export DOCKER_HOST=tcp://docker:2375/ DOCKER_DRIVER=overlay2 && docker info --format '{{json .Name}}')
    - test -z "${CI_JOB_TOKEN}" || docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - test -z "${CI_JOB_TOKEN}" || docker pull ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}-${CI_BUILD_REF}
    - test -z "${CI_JOB_TOKEN}" || docker tag ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}-${CI_BUILD_REF} ${CI_REGISTRY_IMAGE}:latest
    - test -z "${CI_JOB_TOKEN}" || docker push ${CI_REGISTRY_IMAGE}:latest

start_nginx_proxy:
  cache: {}
  dependencies: []
  stage: publish
  only:
    - merge_requests
  tags:
    - shell-executor
    - docker
    - demoserver
  script:
    - docker run --restart always --detach -p 4199:80 -v /var/run/docker.sock:/tmp/docker.sock:ro jwilder/nginx-proxy || true

start_review_server:
  cache: {}
  dependencies: []
  stage: publish
  only:
    - merge_requests
  tags:
    - shell-executor
    - docker
    - demoserver
  script:
    - docker build -t review-server templates/review-server
    - docker rm -f review-server || true
    - docker run
      --name review-server
      --detach
      --restart always
      -v /var/run/docker.sock:/var/run/docker.sock:ro
      --publish 3000:3000
      review-server /usr/bin/node /review-proxy
  environment:
    name: review-server
    url: http://$DEMO_SERVER_NAME:3000

publish_nginx:
  cache: {}
  dependencies: []
  image: docker:stable
  stage: publish
  only:
    refs:
      - develop
      - master
      - tags
      - merge_requests
    changes:
      - nginx/**/*
  tags:
    - shell-executor
    - docker
    - performance
  services:
    - docker:dind
  variables:
    CI_DEBUG_TRACE: 'true'
  script:
    - docker info --format '{{json .Name}}' || (export DOCKER_HOST=tcp://localhost:2375/ DOCKER_DRIVER=overlay2 && docker info --format '{{json .Name}}') || (export DOCKER_HOST=tcp://docker:2375/ DOCKER_DRIVER=overlay2 && docker info --format '{{json .Name}}')
    - test -z "${CI_JOB_TOKEN}" || docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker build -t ${CI_REGISTRY_IMAGE}:nginx-${CI_COMMIT_REF_SLUG} nginx
    - test -z "${CI_JOB_TOKEN}" || docker push ${CI_REGISTRY_IMAGE}:nginx-${CI_COMMIT_REF_SLUG}

push_reports:
  stage: publish
  cache: {}
  only:
    refs:
      - develop
  allow_failure: true
  tags:
    - shell-executor
    - docker
    - performance
  script:
    - docker build -t ${CI_REGISTRY_IMAGE}:reports
      --build-arg ICM_BASE_URL=${ICM_BASE_URL}
      --label revision="${CI_BUILD_REF}"
      --label project="${CI_PROJECT_URL}"
      --file Dockerfile_reports
      .
    - test -z "${CI_JOB_TOKEN}" || docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker push ${CI_REGISTRY_IMAGE}:reports

deploy_demo:
  stage: deploy
  cache: {}
  dependencies: []
  only:
    refs:
      - develop
  tags:
    - shell-executor
    - docker
    - demoserver
  variables:
    GIT_STRATEGY: none
    SERVICE: 'develop-pwa-b2c'
    IMAGE: '${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}-${CI_BUILD_REF}'
  script:
    - test -z "${CI_JOB_TOKEN}" || docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker rm -f ${SERVICE} || true
    - test -z "${CI_JOB_TOKEN}" || docker pull ${IMAGE}
    - docker run
      --detach
      --restart always
      --publish 4321:4200
      --name ${SERVICE}
      --env ICM_BASE_URL=$ICM_BASE_URL
      --env LOGGING=true
      --env SENTRY_DSN=${SENTRY_DSN}
      --add-host $DEMO_SERVER_NAME:$(dig ${DNS_SERVER} +short $DEMO_SERVER_NAME)
      --add-host b2b.$DEMO_SERVER_NAME:$(dig ${DNS_SERVER} +short $DEMO_SERVER_NAME)
      --add-host b2c.$DEMO_SERVER_NAME:$(dig ${DNS_SERVER} +short $DEMO_SERVER_NAME)
      --add-host de.$DEMO_SERVER_NAME:$(dig ${DNS_SERVER} +short $DEMO_SERVER_NAME)
      --add-host smb.$DEMO_SERVER_NAME:$(dig ${DNS_SERVER} +short $DEMO_SERVER_NAME)
      ${IMAGE}
  environment:
    name: demo
    url: http://$DEMO_SERVER_NAME:4321

deploy_demo_b2b:
  stage: deploy
  cache: {}
  dependencies: []
  only:
    refs:
      - develop
  tags:
    - shell-executor
    - docker
    - demoserver
  variables:
    GIT_STRATEGY: none
    SERVICE: 'develop-pwa-b2b'
    IMAGE: '${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}-${CI_BUILD_REF}'
  script:
    - test -z "${CI_JOB_TOKEN}" || docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker rm -f ${SERVICE} || true
    - test -z "${CI_JOB_TOKEN}" || docker pull ${IMAGE}
    - docker run
      --detach
      --restart always
      --publish 4325:4200
      --name ${SERVICE}
      --env ICM_BASE_URL=$ICM_BASE_URL
      --env LOGGING=true
      --env FEATURES=quoting,compare,recently,businessCustomerRegistration,sentry
      --env ICM_CHANNEL=inSPIRED-inTRONICS_Business-Site
      --env SENTRY_DSN=${SENTRY_DSN}
      ${IMAGE}
  environment:
    name: demo-b2b
    url: http://$DEMO_SERVER_NAME:4325

deploy_demo_nginx:
  stage: deploy
  cache: {}
  dependencies: []
  only:
    refs:
      - develop
  tags:
    - shell-executor
    - docker
    - demoserver
  variables:
    GIT_STRATEGY: none
    SERVICE: 'develop-nginx'
    IMAGE: '${CI_REGISTRY_IMAGE}:nginx-${CI_COMMIT_REF_SLUG}'
  script:
    - test -z "${CI_JOB_TOKEN}" || docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker rm -f "${SERVICE}" || true
    - docker pull ${IMAGE}
    - docker run
      --detach
      --publish 4326:80
      --name "${SERVICE}"
      -e UPSTREAM_ICM=${ICM_BASE_URL}
      -e UPSTREAM_PWA=http://$DEMO_SERVER_NAME:4321
      -e PWA_1_SUBDOMAIN=b2c
      -e PWA_1_CHANNEL=inSPIRED-inTRONICS-Site
      -e PWA_2_SUBDOMAIN=b2b
      -e PWA_2_CHANNEL=inSPIRED-inTRONICS_Business-Site
      -e PWA_2_FEATURES=quoting,recently,compare,businessCustomerRegistration,sentry
      -e PWA_3_SUBDOMAIN=de
      -e PWA_3_CHANNEL=inSPIRED-inTRONICS-Site
      -e PWA_3_LANG=de_DE
      -e PWA_3_FEATURES=none
      -e PWA_4_SUBDOMAIN=smb
      -e PWA_4_CHANNEL=inSPIRED-inTRONICS-Site
      -e PWA_4_APPLICATION=smb-responsive
      -e PWA_4_FEATURES=quoting
      -e VIRTUAL_HOST=b2c.$DEMO_SERVER_NAME,b2b.$DEMO_SERVER_NAME,de.$DEMO_SERVER_NAME,smb.$DEMO_SERVER_NAME
      --add-host $DEMO_SERVER_NAME:$(dig ${DNS_SERVER} +short $DEMO_SERVER_NAME)
      ${IMAGE}
  environment:
    name: demo-nginx
    url: http://$DEMO_SERVER_NAME:4326

deploy_demo_BO:
  stage: deploy
  cache: {}
  dependencies: []
  tags:
    - shell-executor
  only:
    - merge_requests
    - develop
  variables:
    GIT_STRATEGY: none
  script:
    - echo "done"
  environment:
    name: BackOffice
    url: $BO_URL

deploy_reports:
  stage: deploy
  cache: {}
  dependencies: []
  only:
    refs:
      - develop
  allow_failure: true
  tags:
    - shell-executor
    - docker
    - demoserver
  variables:
    GIT_STRATEGY: none
    SERVICE: 'intershop-pwa-reports'
    IMAGE: '${CI_REGISTRY_IMAGE}:reports'
  script:
    - test -z "${CI_JOB_TOKEN}" || docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker rm -f ${SERVICE} || true
    - docker run
      --detach
      --restart always
      --publish 4324:8080
      --name ${SERVICE}
      ${IMAGE}
  environment:
    name: reports
    url: http://$DEMO_SERVER_NAME:4324

deploy_review_b2c:
  stage: deploy
  retry: 2
  cache: {}
  dependencies: []
  tags:
    - shell-executor
    - docker
    - demoserver
  only:
    - merge_requests
  variables:
    GIT_STRATEGY: none
  script:
    - set -x
    - test -z "${CI_JOB_TOKEN}" || docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker rm -f "${CI_COMMIT_REF_SLUG}-pwa-b2c" || true
    - docker pull ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}-${CI_BUILD_REF}
    - docker run
      --detach
      --publish-all
      --name "${CI_COMMIT_REF_SLUG}-pwa-b2c"
      -e LOGGING=true
      -e SENTRY_DSN=${SENTRY_DSN}
      -e ICM_BASE_URL=${ICM_BASE_URL}
      --add-host b2b.$CI_COMMIT_REF_SLUG.$DEMO_SERVER_NAME:$(dig ${DNS_SERVER} +short $DEMO_SERVER_NAME)
      --add-host b2c.$CI_COMMIT_REF_SLUG.$DEMO_SERVER_NAME:$(dig ${DNS_SERVER} +short $DEMO_SERVER_NAME)
      --add-host de.$CI_COMMIT_REF_SLUG.$DEMO_SERVER_NAME:$(dig ${DNS_SERVER} +short $DEMO_SERVER_NAME)
      --add-host smb.$CI_COMMIT_REF_SLUG.$DEMO_SERVER_NAME:$(dig ${DNS_SERVER} +short $DEMO_SERVER_NAME)
      --add-host $DEMO_SERVER_NAME:$(dig ${DNS_SERVER} +short $DEMO_SERVER_NAME)
      --add-host b2b.$DEMO_SERVER_NAME:$(dig ${DNS_SERVER} +short $DEMO_SERVER_NAME)
      --add-host b2c.$DEMO_SERVER_NAME:$(dig ${DNS_SERVER} +short $DEMO_SERVER_NAME)
      --add-host de.$DEMO_SERVER_NAME:$(dig ${DNS_SERVER} +short $DEMO_SERVER_NAME)
      --add-host smb.$DEMO_SERVER_NAME:$(dig ${DNS_SERVER} +short $DEMO_SERVER_NAME)
      ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}-${CI_BUILD_REF}
    - docker rm -f "${CI_COMMIT_REF_SLUG}-nginx" || true
    - docker pull ${CI_REGISTRY_IMAGE}:nginx-${CI_COMMIT_REF_SLUG} || (docker pull ${CI_REGISTRY_IMAGE}:nginx-develop && docker tag ${CI_REGISTRY_IMAGE}:nginx-develop ${CI_REGISTRY_IMAGE}:nginx-${CI_COMMIT_REF_SLUG})
    - docker run
      --detach
      --publish-all
      --name "${CI_COMMIT_REF_SLUG}-nginx"
      -e UPSTREAM_ICM=${ICM_BASE_URL}
      --link $CI_COMMIT_REF_SLUG-pwa-b2c
      -e UPSTREAM_PWA=http://$CI_COMMIT_REF_SLUG-pwa-b2c:4200
      -e PWA_1_SUBDOMAIN=b2c
      -e PWA_1_CHANNEL=inSPIRED-inTRONICS-Site
      -e PWA_2_SUBDOMAIN=b2b
      -e PWA_2_CHANNEL=inSPIRED-inTRONICS_Business-Site
      -e PWA_2_FEATURES=quoting,recently,compare,businessCustomerRegistration,sentry
      -e PWA_3_SUBDOMAIN=de
      -e PWA_3_CHANNEL=inSPIRED-inTRONICS-Site
      -e PWA_3_LANG=de_DE
      -e PWA_3_FEATURES=none
      -e PWA_4_SUBDOMAIN=smb
      -e PWA_4_CHANNEL=inSPIRED-inTRONICS-Site
      -e PWA_4_APPLICATION=smb-responsive
      -e PWA_4_FEATURES=quoting
      -e VIRTUAL_HOST=b2c.$CI_COMMIT_REF_SLUG.$DEMO_SERVER_NAME,b2b.$CI_COMMIT_REF_SLUG.$DEMO_SERVER_NAME,de.$CI_COMMIT_REF_SLUG.$DEMO_SERVER_NAME,smb.$CI_COMMIT_REF_SLUG.$DEMO_SERVER_NAME
      ${CI_REGISTRY_IMAGE}:nginx-${CI_COMMIT_REF_SLUG}
    - sleep 10
    - docker run --rm --add-host $DEMO_SERVER_NAME:$(dig ${DNS_SERVER} +short $DEMO_SERVER_NAME) mwendler/wget --wait 10 --tries 10 --retry-connrefused "http://$DEMO_SERVER_NAME:3000/${CI_COMMIT_REF_SLUG}-pwa-b2c"
    - docker run --rm --add-host $DEMO_SERVER_NAME:$(dig ${DNS_SERVER} +short $DEMO_SERVER_NAME) mwendler/wget --wait 10 --tries 10 --retry-connrefused "http://$DEMO_SERVER_NAME:3000/${CI_COMMIT_REF_SLUG}-nginx"
  environment:
    name: review/b2c-$CI_COMMIT_REF_SLUG
    url: http://$DEMO_SERVER_NAME:3000/${CI_COMMIT_REF_SLUG}-nginx
    on_stop: stop_review_b2c

stop_review_b2c:
  stage: deploy
  cache: {}
  dependencies: []
  when: manual
  tags:
    - shell-executor
    - docker
    - demoserver
  only:
    - merge_requests
  variables:
    GIT_STRATEGY: none
  script:
    - docker rm -f "${CI_COMMIT_REF_SLUG}-pwa-b2c" || true
    - docker rm -f "${CI_COMMIT_REF_SLUG}-nginx" || true
  environment:
    name: review/b2c-$CI_COMMIT_REF_SLUG
    action: stop

deploy_review_b2b:
  stage: deploy
  retry: 2
  cache: {}
  dependencies: []
  tags:
    - shell-executor
    - docker
    - demoserver
  only:
    - merge_requests
  variables:
    GIT_STRATEGY: none
  script:
    - set -x
    - test -z "${CI_JOB_TOKEN}" || docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - docker rm -f "${CI_COMMIT_REF_SLUG}-pwa-b2b" || true
    - docker pull ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}-${CI_BUILD_REF}
    - docker run
      --detach
      --publish-all
      --name "${CI_COMMIT_REF_SLUG}-pwa-b2b"
      -e LOGGING=true
      -e SENTRY_DSN=${SENTRY_DSN}
      -e ICM_BASE_URL=${ICM_BASE_URL}
      -e ICM_CHANNEL=inSPIRED-inTRONICS_Business-Site
      -e FEATURES=quoting,recently,compare,businessCustomerRegistration,sentry
      --add-host $DEMO_SERVER_NAME:$(dig ${DNS_SERVER} +short $DEMO_SERVER_NAME)
      ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}-${CI_BUILD_REF}
    - sleep 10
    - docker run --rm --add-host $DEMO_SERVER_NAME:$(dig ${DNS_SERVER} +short $DEMO_SERVER_NAME) mwendler/wget --wait 10 --tries 10 --retry-connrefused "http://$DEMO_SERVER_NAME:3000/${CI_COMMIT_REF_SLUG}-pwa-b2b"
  environment:
    name: review/b2b-$CI_COMMIT_REF_SLUG
    url: http://$DEMO_SERVER_NAME:3000/${CI_COMMIT_REF_SLUG}-pwa-b2b
    on_stop: stop_review_b2b

stop_review_b2b:
  stage: deploy
  cache: {}
  dependencies: []
  when: manual
  tags:
    - shell-executor
    - docker
    - demoserver
  only:
    - merge_requests
  variables:
    GIT_STRATEGY: none
  script:
    - docker rm -f "${CI_COMMIT_REF_SLUG}-pwa-b2b" || true
    - sh .gitlab-ci-cleanup-mr-images.sh
  environment:
    name: review/b2b-$CI_COMMIT_REF_SLUG
    action: stop

build_e2e_image:
  stage: deploy
  cache: {}
  dependencies: []
  image: docker:stable
  only:
    refs:
      - develop
      - master
      - tags
      - merge_requests
  tags:
    - shell-executor
    - docker
    - performance
  services:
    - docker:dind
  script:
    - docker info --format '{{json .Name}}' || (export DOCKER_HOST=tcp://localhost:2375/ DOCKER_DRIVER=overlay2 && docker info --format '{{json .Name}}') || (export DOCKER_HOST=tcp://docker:2375/ DOCKER_DRIVER=overlay2 && docker info --format '{{json .Name}}')
    - cd e2e
    - docker build -t ${CI_REGISTRY_IMAGE}:e2e-${CI_COMMIT_REF_SLUG}-${CI_BUILD_REF} .
    - test -z "${CI_JOB_TOKEN}" || docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - test -z "${CI_JOB_TOKEN}" || docker push ${CI_REGISTRY_IMAGE}:e2e-${CI_COMMIT_REF_SLUG}-${CI_BUILD_REF}

schematics:
  image: node:10
  stage: e2e
  retry: 1
  only:
    - merge_requests
  except:
    refs:
      - develop
      - master
  tags:
    - docker-executor
    - performance
  dependencies: []
  script:
    - npm install
    - bash .gitlab-ci-test-schematics.sh
    - echo "schematics complete"

.universal_template: &universal_definition
  image: ${CI_REGISTRY_IMAGE}:e2e-${CI_COMMIT_REF_SLUG}-${CI_BUILD_REF}
  stage: e2e
  only:
    - merge_requests
    - triggers
  tags:
    - docker-executor
    - e2e
  dependencies: []
  cache: {}
  variables:
    GIT_STRATEGY: none
  script:
    - echo "$(dig ${DNS_SERVER} +short $DEMO_SERVER_NAME) $DEMO_SERVER_NAME" >> /etc/hosts
    - wget --wait 10 --tries 30 --retry-connrefused ${ICM_BASE_URL}/INTERSHOP/rest/WFS/inSPIRED-inTRONICS-Site/-
    - sh /test-universal.sh

universal_b2c:
  <<: *universal_definition
  variables:
    PWA_BASE_URL: http://${DEMO_SERVER_NAME}:3000/${CI_COMMIT_REF_SLUG}-pwa-b2c

universal_b2b:
  <<: *universal_definition
  variables:
    PWA_BASE_URL: http://${DEMO_SERVER_NAME}:3000/${CI_COMMIT_REF_SLUG}-pwa-b2b

.cypress_template: &cypress_definition
  image: ${CI_REGISTRY_IMAGE}:e2e-${CI_COMMIT_REF_SLUG}-${CI_BUILD_REF}
  stage: e2e
  tags:
    - docker-executor
    - e2e
  artifacts:
    reports:
      junit: /reports/e2e-*.xml
    when: on_failure
    expire_in: 2 weeks
    paths:
      - cypress/screenshots
      - cypress/videos
  dependencies: []
  cache: {}
  script:
    - node --version && npm --version
    - export DISPLAY=:5
    - echo "$(dig ${DNS_SERVER} +short $DEMO_SERVER_NAME) $DEMO_SERVER_NAME" >> /etc/hosts
    - wget --wait 10 --tries 30 --retry-connrefused ${ICM_BASE_URL}/INTERSHOP/rest/WFS/inSPIRED-inTRONICS-Site/-
    - nohup bash -c "Xvfb ${DISPLAY} &"
    - sh /e2e-partition.sh $CI_NODE_TOTAL $CI_NODE_INDEX $TESTS | xargs -r sh /test-e2e.sh
    - echo "E2E complete"

cypress_remote:
  <<: *cypress_definition
  parallel: 5
  only:
    - merge_requests
    - triggers
  variables:
    GIT_STRATEGY: none
    PWA_BASE_URL: http://${DEMO_SERVER_NAME}:3000/${CI_COMMIT_REF_SLUG}-pwa-b2c
    TESTS: '*b2c*.e2e-spec.ts'

cypress_remote_b2b:
  <<: *cypress_definition
  parallel: 2
  only:
    - merge_requests
    - triggers
  variables:
    GIT_STRATEGY: none
    PWA_BASE_URL: http://${DEMO_SERVER_NAME}:3000/${CI_COMMIT_REF_SLUG}-pwa-b2b
    TESTS: '*b2b*.e2e-spec.ts'

cypress_mocked:
  <<: *cypress_definition
  parallel: 2
  only:
    - merge_requests
  variables:
    GIT_STRATEGY: none
    PWA_BASE_URL: http://${DEMO_SERVER_NAME}:3000/${CI_COMMIT_REF_SLUG}-mock
    TESTS: '*mock*.e2e-spec.ts'

check_mr_title:
  cache: {}
  dependencies: []
  image: endeveit/docker-jq
  stage: verify
  only:
    - merge_requests
  tags:
    - docker-executor
  script:
    - sh .gitlab-ci-check-mr-title.sh
    - echo "check complete"

check_tslint_no_warnings:
  cache: {}
  dependencies: []
  image: node:10
  stage: verify
  only:
    - merge_requests
  tags:
    - docker-executor
  script:
    - npm ci
    - sh .gitlab-ci-check-no-additional-warnings.sh
    - echo "check complete"
