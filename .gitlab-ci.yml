stages:
  - setup
  - build
  - integration
  - publish
  - distribute
  - deploy
  - e2e

variables:
  npm_config_cache: "$CI_PROJECT_DIR/cache/.npm"
  CYPRESS_CACHE_FOLDER: "$CI_PROJECT_DIR/cache/Cypress"

cache:
  key: ${CI_COMMIT_REF_SLUG}
  untracked: false
  paths:
    - cache

setup:
  image: node:10
  stage: setup
  only:
    - merge_requests
  except:
    refs:
      - develop
      - master
  tags:
    - docker-executor
  script:
    - node --version && npm --version
    - bash -c "cd tslint-rules ; npm --silent run build"
    - bash .gitlab-ci-test-no-changes.sh 'you probably did not commit compiled binaries in tslint-rules'
    - bash -c "cd schematics ; npm --silent run build"
    - bash .gitlab-ci-test-no-changes.sh 'you probably did not commit compiled binaries in schematics'
    - npm ci --prefer-offline
    - bash .gitlab-ci-test-no-changes.sh 'you probably did not commit package-lock.json after installing packages'
    - echo "setup complete"

jest_test:
  image: node:10
  stage: build
  only:
    - merge_requests
  except:
    refs:
      - develop
      - master
  tags:
    - docker-executor
  artifacts:
    paths:
      - reports/coverage
    expire_in: 1 day
    reports:
      junit: reports/junit.xml
  dependencies: []
  coverage: '/^Statements\s*:\s*([^%]+)/'
  script:
    - sh .gitlab-ci-check-app-changes.sh || exit 0
    - npm ci --prefer-offline
    - npx jest -c jest-reports.config.js --ci
    - echo "build complete"

compile:
  image: node:10
  stage: build
  only:
    - merge_requests
  except:
    refs:
      - develop
      - master
  tags:
    - docker-executor
  artifacts:
    paths:
      - reports/bundle
    expire_in: 1 day
  dependencies: []
  script:
    - sh .gitlab-ci-check-app-changes.sh || exit 0
    - npm ci --prefer-offline --production
    - npx ng build --progress false --prod --stats-json
    - npx webpack-bundle-analyzer dist/browser/stats.json dist/browser -r reports/bundle/index.html -m static
    - npm ci --prefer-offline
    - npx tsc -p src/tsconfig.spec.json
    - echo "build complete"

codestyle:
  image: node:10
  stage: build
  only:
    - merge_requests
  except:
    refs:
      - develop
      - master
  tags:
    - docker-executor
  artifacts:
    expire_in: 1 day
    paths:
      - reports/jscpd
      - reports/tslint
  dependencies: []
  script:
    - npm ci --prefer-offline
    - npm i --no-save tslint-html-report jscpd-html-reporter
    - node reports/tslint-report
    - node reports/jscpd-report
    - npm run lint -- --format stylish
    - npm run format
    - bash .gitlab-ci-test-no-changes.sh 'you probably committed unformatted code'
    - echo "build complete"

schematics:
  image: node:10
  stage: integration
  only:
    - merge_requests
  except:
    refs:
      - develop
      - master
  tags:
    - docker-executor
  dependencies: []
  script:
    - npm install
    - bash .gitlab-ci-test-schematics.sh
    - echo "schematics complete"

cypress_local:
  image: cypress/browsers:chrome69
  stage: integration
  retry: 1
  only:
    - merge_requests
  except:
    refs:
      - develop
      - master
  tags:
    - docker-executor
  artifacts:
    reports:
      junit: reports/e2e-*.xml
    when: on_failure
    expire_in: 2 weeks
    paths:
      - cypress/screenshots
  dependencies: []
  script:
    - node --version && npm --version
    - npm ci --prefer-offline
    - export ICM_BASE_URL=http://localhost:4200 DISPLAY=:5
    - nohup bash -c "Xvfb ${DISPLAY} &"
    - nohup bash -c "npx ng serve &"
    - wget -q --wait 10 --tries 10 --retry-connrefused http://localhost:4200
    - npx cypress run -b chrome -e ICM_BASE_URL=${ICM_BASE_URL} -c "baseUrl=http://localhost:4200,integrationFolder=cypress/integration/local" -r junit --reporter-options 'mochaFile=reports/e2e-local-[hash]-report.xml,toConsole=true'
    - echo "E2E complete"

publish_pwa:
  cache: {}
  dependencies: []
  image: docker:stable
  stage: integration
  only:
    refs:
      - develop
      - tags
      - merge_requests
  tags:
    - shell-executor
    - docker
    - performance
  services:
    - docker:dind
  script:
    - VERSION="$(grep "version" package.json | grep -Eo '[0-9][^"]*')"
    - docker info --format '{{json .Name}}' || (export DOCKER_HOST=tcp://localhost:2375/ DOCKER_DRIVER=overlay2 && docker info --format '{{json .Name}}') || (export DOCKER_HOST=tcp://docker:2375/ DOCKER_DRIVER=overlay2 && docker info --format '{{json .Name}}')
    - docker build -t ${CI_REGISTRY_IMAGE}:${CI_BUILD_REF}
            --build-arg displayVersion="$VERSION ($CI_COMMIT_REF_NAME @ $CI_COMMIT_SHA)"
            --label environment="production"
            --label revision="${CI_BUILD_REF}"
            --label project="${CI_PROJECT_URL}"
            .
    - test -z "${CI_JOB_TOKEN}" || docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - test -z "${CI_JOB_TOKEN}" || docker push ${CI_REGISTRY_IMAGE}:${CI_BUILD_REF}

publish_pwa_latest:
  cache: {}
  dependencies: []
  image: docker:stable
  stage: publish
  only:
    - tags
  tags:
    - docker-executor
  services:
    - docker:dind
  script:
    - docker info --format '{{json .Name}}' || (export DOCKER_HOST=tcp://localhost:2375/ DOCKER_DRIVER=overlay2 && docker info --format '{{json .Name}}') || (export DOCKER_HOST=tcp://docker:2375/ DOCKER_DRIVER=overlay2 && docker info --format '{{json .Name}}')
    - test -z "${CI_JOB_TOKEN}" || docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - test -z "${CI_JOB_TOKEN}" || docker pull ${CI_REGISTRY_IMAGE}:${CI_BUILD_REF}
    - test -z "${CI_JOB_TOKEN}" || docker tag ${CI_REGISTRY_IMAGE}:${CI_BUILD_REF} ${CI_REGISTRY_IMAGE}:latest
    - test -z "${CI_JOB_TOKEN}" || docker push ${CI_REGISTRY_IMAGE}:latest

start_nginx_proxy:
  cache: {}
  dependencies: []
  stage: publish
  only:
    - merge_requests
  tags:
    - shell-executor
    - docker
    - demoserver
  script:
    - docker run --restart always -d -p 4199:80 -v /var/run/docker.sock:/tmp/docker.sock:ro jwilder/nginx-proxy || true

publish_nginx:
  cache: {}
  dependencies: []
  image: docker:stable
  stage: publish
  only:
    refs:
      - develop
      - master
      - tags
      - merge_requests
  tags:
    - shell-executor
    - docker
    - performance
  services:
    - docker:dind
  variables:
    CI_DEBUG_TRACE: "true"
  script:
    - docker info --format '{{json .Name}}' || (export DOCKER_HOST=tcp://localhost:2375/ DOCKER_DRIVER=overlay2 && docker info --format '{{json .Name}}') || (export DOCKER_HOST=tcp://docker:2375/ DOCKER_DRIVER=overlay2 && docker info --format '{{json .Name}}')
    - test -z "${CI_JOB_TOKEN}" || docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - (sh .gitlab-ci-check-app-changes.sh '^nginx' || test 'develop' = "${CI_COMMIT_REF_SLUG}") && docker build -t ${CI_REGISTRY_IMAGE}:nginx-${CI_COMMIT_REF_SLUG} nginx || (docker pull ${CI_REGISTRY_IMAGE}:nginx-develop && docker tag ${CI_REGISTRY_IMAGE}:nginx-develop ${CI_REGISTRY_IMAGE}:nginx-${CI_COMMIT_REF_SLUG})
    - test -z "${CI_JOB_TOKEN}" || docker push ${CI_REGISTRY_IMAGE}:nginx-${CI_COMMIT_REF_SLUG}

push_reports:
  stage: publish
  cache: {}
  only:
    refs:
      - develop
  allow_failure: true
  tags:
  - shell-executor
  - docker
  - performance
  script:
  - docker build -t ${CI_REGISTRY_IMAGE}:reports
           --build-arg ICM_BASE_URL=${ICM_BASE_URL}
           --label revision="${CI_BUILD_REF}"
           --label project="${CI_PROJECT_URL}"
           --file Dockerfile_reports
           .
  - test -z "${CI_JOB_TOKEN}" || docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
  - docker push ${CI_REGISTRY_IMAGE}:reports

pull_images:
  stage: distribute
  cache: {}
  dependencies: []
  only:
    refs:
      - develop
  tags:
  - shell-executor
  - docker
  - demoserver
  variables:
    GIT_STRATEGY: none
  script:
  - test -z "${CI_JOB_TOKEN}" || docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
  - docker pull "${CI_REGISTRY_IMAGE}:${CI_BUILD_REF}"
  - docker pull "${CI_REGISTRY_IMAGE}:reports" || true

deploy_demo:
  stage: deploy
  cache: {}
  dependencies: []
  only:
    refs:
      - develop
  tags:
  - shell-executor
  - docker
  - chuck-norris-swarm-manager
  variables:
    GIT_STRATEGY: none
    SERVICE: "intershop-pwa"
    IMAGE: "${CI_REGISTRY_IMAGE}:${CI_BUILD_REF}"
  script:
  - test -z "${CI_JOB_TOKEN}" || docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
  - docker service create --with-registry-auth --replicas $SERVICE_REPLICAS --publish target=4200,published=4321 --name ${SERVICE} --env ICM_BASE_URL=$ICM_BASE_URL --env LOGGING=true ${IMAGE} || docker service update --with-registry-auth --image ${IMAGE} --env-add ICM_BASE_URL=$ICM_BASE_URL --env-add LOGGING=true --force --replicas $SERVICE_REPLICAS --update-delay 0s --update-parallelism 0 --update-order stop-first --update-failure-action continue ${SERVICE}
  environment:
    name: demo
    url: http://jdevbuildslave01.rnd.j.intershop.de:4321

deploy_demo_b2b:
  stage: deploy
  cache: {}
  dependencies: []
  only:
    refs:
      - develop
  tags:
  - shell-executor
  - docker
  - chuck-norris-swarm-manager
  variables:
    GIT_STRATEGY: none
    SERVICE: "intershop-pwa-b2b"
    IMAGE: "${CI_REGISTRY_IMAGE}:${CI_BUILD_REF}"
  script:
  - test -z "${CI_JOB_TOKEN}" || docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
  - docker service create --with-registry-auth --replicas $SERVICE_REPLICAS --publish target=4200,published=4325 --name ${SERVICE} --env ICM_BASE_URL=$ICM_BASE_URL --env LOGGING=true --env FEATURES=quoting,compare,recently,businessCustomerRegistration --env ICM_CHANNEL=inSPIRED-inTRONICS_Business-Site ${IMAGE} || docker service update --with-registry-auth --image ${IMAGE} --env-add ICM_BASE_URL=$ICM_BASE_URL --env-add LOGGING=true --env-add FEATURES=quoting,compare,recently,businessCustomerRegistration --env-add ICM_CHANNEL=inSPIRED-inTRONICS_Business-Site --force --replicas $SERVICE_REPLICAS --update-delay 0s --update-parallelism 0 --update-order stop-first --update-failure-action continue ${SERVICE}
  environment:
    name: demo-b2b
    url: http://jdevbuildslave01.rnd.j.intershop.de:4325

deploy_reports:
  stage: deploy
  cache: {}
  dependencies: []
  only:
    refs:
      - develop
  allow_failure: true
  tags:
  - shell-executor
  - docker
  - chuck-norris-swarm-manager
  variables:
    GIT_STRATEGY: none
    SERVICE: "intershop-pwa-reports"
    IMAGE: "${CI_REGISTRY_IMAGE}:reports"
  script:
  - test -z "${CI_JOB_TOKEN}" || docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
  - docker service create --with-registry-auth --constraint node.hostname==jdevbuildslave01.rnd.j.intershop.de --publish target=8080,published=4324 --name ${SERVICE} ${IMAGE} || docker service update --with-registry-auth --image ${IMAGE} ${SERVICE}
  environment:
    name: reports
    url: http://jdevbuildslave01.rnd.j.intershop.de:4324

deploy_review_b2c:
  stage: deploy
  cache: {}
  dependencies: []
  tags:
  - shell-executor
  only:
    - merge_requests
  variables:
    GIT_STRATEGY: none
  script:
  - echo "done"
  environment:
    name: review/b2c-$CI_COMMIT_REF_SLUG
    url: http://b2c.$CI_COMMIT_REF_SLUG.jdevbuildslave01.rnd.j.intershop.de:4199
    on_stop: stop_review_b2c

stop_review_b2c:
  stage: e2e
  cache: {}
  dependencies: []
  when: manual
  tags:
  - shell-executor
  only:
    - merge_requests
  variables:
    GIT_STRATEGY: none
  script:
  - echo "done"
  environment:
    name: review/b2c-$CI_COMMIT_REF_SLUG
    action: stop

deploy_review_b2b:
  stage: deploy
  cache: {}
  dependencies: []
  tags:
  - shell-executor
  - docker
  - demoserver
  only:
    - merge_requests
  variables:
    GIT_STRATEGY: none
  script:
  - test -z "${CI_JOB_TOKEN}" || docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
  - docker rm -f "${CI_COMMIT_REF_SLUG}-pwa" || true
  - docker pull ${CI_REGISTRY_IMAGE}:${CI_BUILD_REF}
  - docker run -d --name "${CI_COMMIT_REF_SLUG}-pwa"
        -e LOGGING=true
        -e ICM_BASE_URL=http://10.0.206.226:4322
        ${CI_REGISTRY_IMAGE}:${CI_BUILD_REF}
  - docker rm -f "${CI_COMMIT_REF_SLUG}-nginx" || true
  - docker pull ${CI_REGISTRY_IMAGE}:nginx-${CI_COMMIT_REF_SLUG}
  - docker run -d --name "${CI_COMMIT_REF_SLUG}-nginx"
        --restart always
        -e UPSTREAM_ICM=http://10.0.206.226:4322
        --link $CI_COMMIT_REF_SLUG-pwa
        -e UPSTREAM_PWA=http://$CI_COMMIT_REF_SLUG-pwa:4200
        -e PWA_1_SUBDOMAIN=b2b
        -e PWA_1_CHANNEL=inSPIRED-inTRONICS_Business-Site
        -e PWA_1_FEATURES=quoting,recently,compare,businessCustomerRegistration
        -e PWA_2_SUBDOMAIN=b2c
        -e PWA_2_CHANNEL=inSPIRED-inTRONICS-Site
        -e PWA_3_SUBDOMAIN=de
        -e PWA_3_CHANNEL=inSPIRED-inTRONICS-Site
        -e PWA_3_LANG=de_DE
        -e PWA_3_FEATURES=none
        -e PWA_4_SUBDOMAIN=smb
        -e PWA_4_CHANNEL=inSPIRED-inTRONICS-Site
        -e PWA_4_APPLICATION=smb-responsive
        -e PWA_4_FEATURES=quoting
        -e VIRTUAL_HOST=b2c.$CI_COMMIT_REF_SLUG.jdevbuildslave01.rnd.j.intershop.de,b2b.$CI_COMMIT_REF_SLUG.jdevbuildslave01.rnd.j.intershop.de,de.$CI_COMMIT_REF_SLUG.jdevbuildslave01.rnd.j.intershop.de,smb.$CI_COMMIT_REF_SLUG.jdevbuildslave01.rnd.j.intershop.de
        ${CI_REGISTRY_IMAGE}:nginx-${CI_COMMIT_REF_SLUG}
  environment:
    name: review/b2b-$CI_COMMIT_REF_SLUG
    url: http://b2b.$CI_COMMIT_REF_SLUG.jdevbuildslave01.rnd.j.intershop.de:4199
    on_stop: stop_review_b2b

stop_review_b2b:
  stage: e2e
  cache: {}
  dependencies: []
  when: manual
  tags:
  - shell-executor
  - docker
  - demoserver
  only:
    - merge_requests
  variables:
    GIT_STRATEGY: none
  script:
  - docker rm -f "${CI_COMMIT_REF_SLUG}-pwa" || true
  - docker rm -f "${CI_COMMIT_REF_SLUG}-nginx" || true
  environment:
    name: review/b2b-$CI_COMMIT_REF_SLUG
    action: stop

cypress_remote:
  image: cypress/browsers:chrome69
  stage: e2e
  only:
    - merge_requests
  tags:
    - docker-executor
  artifacts:
    reports:
      junit: reports/e2e-*.xml
    when: on_failure
    expire_in: 2 weeks
    paths:
      - cypress/screenshots
  dependencies: []
  variables:
    ICM_BASE_URL: http://10.0.206.226:4322
    PWA_BASE_URL: http://b2c.$CI_COMMIT_REF_SLUG.jdevbuildslave01.rnd.j.intershop.de:4199
  script:
    - node --version && npm --version
    - export DISPLAY=:5
    - npm ci --prefer-offline
    - wget --wait 10 --tries 30 --retry-connrefused ${ICM_BASE_URL}/INTERSHOP/rest/WFS/inSPIRED-inTRONICS-Site/-
    - echo "10.0.29.3 b2c.$CI_COMMIT_REF_SLUG.jdevbuildslave01.rnd.j.intershop.de" >> /etc/hosts
    - wget --wait 10 --tries 10 --retry-connrefused ${PWA_BASE_URL}
    - sh .gitlab-ci-test-universal.sh
    - nohup bash -c "Xvfb ${DISPLAY} &"
    - node cypress-ci-e2e
    - echo "E2E complete"
