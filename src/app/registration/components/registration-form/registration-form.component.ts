import { HttpErrorResponse } from '@angular/common/http';
import {
  ChangeDetectionStrategy,
  Component,
  EventEmitter,
  Input,
  OnChanges,
  OnDestroy,
  OnInit,
  Output,
  SimpleChanges,
} from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { UUID } from 'angular2-uuid';
import { CustomValidators } from 'ng2-validation';
import { takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs/Subject';
import { AddressFormService } from '../../../forms/address';
import { SpecialValidators } from '../../../forms/shared/validators/special-validators';
import { Country } from '../../../models/country/country.model';
import { Customer } from '../../../models/customer/customer.model';
import { Locale } from '../../../models/locale/locale.model';
import { Region } from '../../../models/region/region.model';
import {
  markAsDirtyRecursive,
  markFormControlsAsInvalid,
  updateValidatorsByDataLength,
} from '../../../utils/form-utils';

@Component({
  selector: 'ish-registration-form',
  templateUrl: './registration-form.component.html',
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class RegistrationFormComponent implements OnInit, OnChanges, OnDestroy {
  @Input() countries: Country[];
  @Input() regions: Region[];
  @Input() languages: Locale[];
  @Input() titles: string[];
  @Input() error: HttpErrorResponse;

  @Output() create = new EventEmitter<Customer>();
  @Output() cancel = new EventEmitter<void>();
  @Output() countryChange = new EventEmitter<string>();

  destroy$ = new Subject();
  form: FormGroup;
  submitted = false;

  constructor(private fb: FormBuilder, private afs: AddressFormService) {}

  ngOnInit() {
    this.form = this.fb.group({
      credentials: this.fb.group({
        login: ['', [Validators.required, CustomValidators.email]],
        loginConfirmation: ['', [Validators.required, CustomValidators.email]],
        password: ['', [Validators.required, SpecialValidators.password]],
        passwordConfirmation: ['', [Validators.required, SpecialValidators.password]],
        securityQuestion: ['', [Validators.required]],
        securityQuestionAnswer: ['', [Validators.required]],
      }),
      countryCodeSwitch: ['', [Validators.required]],
      preferredLanguage: ['en_US', [Validators.required]],
      birthday: [''],
      captcha: [false, [Validators.required]],
      address: this.afs.getFactory('default').getGroup(), // filled dynamically when country code changes
    });

    // build and register new address form when country code changed
    this.form
      .get('countryCodeSwitch')
      .valueChanges.pipe(takeUntil(this.destroy$))
      .subscribe(countryCodeSwitch => this.handleCountryChange(countryCodeSwitch));

    // set validators for credentials form
    const credForm = this.form.get('credentials');
    credForm.get('loginConfirmation').setValidators(CustomValidators.equalTo(credForm.get('login')));
    credForm.get('passwordConfirmation').setValidators(CustomValidators.equalTo(credForm.get('password')));
  }

  ngOnChanges(c: SimpleChanges) {
    // update validators for "state" control in address form according to regions
    const stateControl = this.form && this.form.get('address.state');
    if (c.regions && stateControl) {
      updateValidatorsByDataLength(stateControl, this.regions, Validators.required, true);
    }
    if (c.error && c.error.currentValue) {
      if (c.error.currentValue.headers.get('error-missing-attributes')) {
        const missingAttributes: string = c.error.currentValue.headers.get('error-missing-attributes');
        // map missing 'email' response to login field
        const list: string[] = missingAttributes
          .split(',')
          .map(attr => (attr === 'email' ? 'credentials.login' : attr));

        markFormControlsAsInvalid(this.form, list);
      }
    }
  }

  ngOnDestroy() {
    this.destroy$.next();
  }

  cancelForm() {
    this.cancel.emit();
  }

  /**
   * Submits form and throws create event when form is valid
   */
  submitForm() {
    if (this.form.invalid) {
      this.submitted = true;
      markAsDirtyRecursive(this.form);
      return;
    }

    const formCustomer = this.form.value;

    const customer: Customer = {
      firstName: formCustomer.address.firstName,
      lastName: formCustomer.address.lastName,
      customerNo: UUID.UUID(), // TODO: customerNo should be generated by the server
      email: formCustomer.credentials.login,
      phoneHome: formCustomer.address.phoneHome,
      title: formCustomer.address.title,
      address: formCustomer.address,
      credentials: {
        login: formCustomer.credentials.login,
        password: formCustomer.credentials.password,
        securityQuestion: formCustomer.credentials.securityQuestion,
        securityQuestionAnswer: formCustomer.credentials.securityQuestionAnswer,
      },
      birthday: formCustomer.birthday === '' ? null : formCustomer.birthday, // TODO: see IS-22276
      preferredLanguage: formCustomer.preferredLanguage,
    };

    this.create.emit(customer);
  }

  private handleCountryChange(countryCode: string) {
    const oldFormValue = this.form.get('address').value;
    const group = this.afs.getFactory(countryCode).getGroup({
      ...oldFormValue,
      countryCode,
    });
    this.form.setControl('address', group);

    this.countryChange.emit(countryCode);
  }

  get formDisabled() {
    return this.form.invalid && this.submitted;
  }

  get countryCode() {
    return this.form.get('countryCodeSwitch').value;
  }
}
