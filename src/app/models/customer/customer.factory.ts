import { UUID } from 'angular2-uuid';
import { AddressFactory } from '../address/address.factory';
import { CredentialsFactory } from '../credentials/credentials.factory';
import { FactoryHelper } from '../factory-helper';
import { CustomerData } from './customer.interface';
import { Customer } from './customer.model';

export class CustomerFactory {

  /*
    Converts customerData interface to customer object
  */
  static fromData(data: CustomerData): Customer {
    const customer: Customer = new Customer();

    FactoryHelper.primitiveMapping<CustomerData, Customer>(data, customer);
    if (data.preferredShipToAddress) {
      customer.preferredShipToAddress = AddressFactory.fromData(data.preferredShipToAddress);
    }
    if (data.preferredInvoiceToAddress) {
      customer.preferredInvoiceToAddress = AddressFactory.fromData(data.preferredInvoiceToAddress);
    }
    if (data.credentials) {
      customer.credentials = CredentialsFactory.fromData(data.credentials);
    }
    if (data.address) {
      customer.address = AddressFactory.fromData(data.address);
    }
    return customer;
  }

  /*
    Converts customer object to customerData interface
  */
  static toData(customer: Customer): CustomerData {
    if (!customer) {
      return null;
    }

    const customerData = new Object as CustomerData;
    FactoryHelper.primitiveMapping<Customer, CustomerData>(customer, customerData);

    if (customer.credentials) {
      customerData.credentials = CredentialsFactory.toData(customer.credentials);
    }

    if (customer.address) {
      customerData.address = AddressFactory.toData(customer.address);
    }
    return customerData;
  }

  /*
    Converts (form) value to customer object
  */
  static fromValue(value: any): Customer {
    if (!value) {
      return null;
    }

    const customer = new Customer();
    FactoryHelper.primitiveMapping<any, Customer>(value, customer, ['preferredLanguage', 'birthday', 'captcha']);

    // create and assign a customer number; ToDo: customerNo should be generated by the server
    customer.customerNo = customer.customerNo || UUID.UUID();

    // create and assign a new credentials object
    if (value.credentials) {
      customer.credentials = CredentialsFactory.fromValue(value.credentials);
      customer.email = customer.email || customer.credentials.login;
    }

    // create and assign a new address object
    if (value.address) {
      customer.address = AddressFactory.fromValue(value.address);

      // copy address entries to the customer, if empty
      customer.firstName = customer.firstName || customer.address.firstName;
      customer.lastName = customer.lastName || customer.address.lastName;
      customer.phoneHome = customer.phoneHome || customer.address.phoneHome;
      if (customer.title || customer.address.title) {
        customer.title = customer.title || customer.address.title;
      }
    }
    return customer;
  }

  /*
    Converts (form) value to customerdata interface
  */
  static fromFormValueToData(formValue: any): CustomerData {
    if (!formValue) {
      return null;
    }

    return this.toData(this.fromValue(formValue));
  }
}
