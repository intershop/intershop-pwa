import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { ActivatedRoute, ParamMap, Router } from '@angular/router';
import { FormlyFieldConfig } from '@ngx-formly/core';
import { UUID } from 'angular2-uuid';
import { Observable } from 'rxjs';
import { map, tap } from 'rxjs/operators';

import { AccountFacade } from 'ish-core/facades/account.facade';
import { FeatureToggleService } from 'ish-core/feature-toggle.module';
import { Credentials } from 'ish-core/models/credentials/credentials.model';
import { Customer, CustomerRegistrationType } from 'ish-core/models/customer/customer.model';
import { HttpError } from 'ish-core/models/http-error/http-error.model';
import { User } from 'ish-core/models/user/user.model';

import { RegistrationConfigurationService } from './formly/registration-configuration/registration-configuration.service';

/**
 * The Registration Page Container renders the customer registration form using the {@link RegistrationFormComponent}
 *
 */
@Component({
  templateUrl: './registration-page.component.html',
  changeDetection: ChangeDetectionStrategy.OnPush,
  providers: [RegistrationConfigurationService],
})
export class RegistrationPageComponent implements OnInit {
  userError$: Observable<HttpError>;
  businessCustomerRegistration: boolean;

  constructor(
    private accountFacade: AccountFacade,
    private router: Router,
    private route: ActivatedRoute,
    private featureToggle: FeatureToggleService,
    private registrationConfiguration: RegistrationConfigurationService
  ) {}

  submitted = false;

  fields$: Observable<FormlyFieldConfig[]>;
  model = {};
  form = new FormGroup({});

  ngOnInit() {
    this.userError$ = this.accountFacade.userError$;
    this.fields$ = this.route.queryParamMap.pipe(
      map((paramMap: ParamMap) => ({
        sso: paramMap.get('sso') === 'true',
        businessCustomer: this.featureToggle.enabled('businessCustomerRegistration'),
      })),
      tap(config => (this.registrationConfiguration.registrationConfig = config)),
      map(() => this.registrationConfiguration.getRegistrationConfiguration())
    );
    this.businessCustomerRegistration = this.featureToggle.enabled('businessCustomerRegistration');
  }

  cancelForm() {
    this.router.navigate(['/home']);
  }

  onCreate() {
    if (this.form.invalid) {
      this.submitted = true;
      return;
    }
    const formValue = this.form.value;

    const address = formValue.address;

    const customer: Customer = {
      isBusinessCustomer: false,
      customerNo: UUID.UUID(), // TODO: customerNo should be generated by the server - IS-24884
    };

    const user: User = {
      title: formValue.address.title,
      firstName: formValue.address.firstName,
      lastName: formValue.address.lastName,
      email: formValue.login,
      phoneHome: formValue.address.phoneHome,
      birthday: formValue.birthday === '' ? undefined : formValue.birthday, // TODO: see IS-22276
    };

    const credentials: Credentials = {
      login: formValue.login,
      password: formValue.password,
    };

    if (this.businessCustomerRegistration) {
      customer.isBusinessCustomer = true;
      customer.companyName = formValue.address.companyName1;
      customer.companyName2 = formValue.address.companyName2;
      customer.taxationID = formValue.taxationID;
      user.businessPartnerNo = 'U' + customer.customerNo;
    }

    const registration: CustomerRegistrationType = { customer, user, credentials, address };
    registration.captcha = this.form.get('captcha').value;
    registration.captchaAction = this.form.get('captchaAction').value;

    this.accountFacade.createUser(registration);
  }

  /** return boolean to set submit button enabled/disabled */
  get formDisabled(): boolean {
    return this.form.invalid && this.submitted;
  }
}
