import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';
import { FormGroup, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import { FormlyConfig, FormlyFieldConfig } from '@ngx-formly/core';
import { UUID } from 'angular2-uuid';
import { Observable, Subject } from 'rxjs';

import { AccountFacade } from 'ish-core/facades/account.facade';
import { FeatureToggleService } from 'ish-core/feature-toggle.module';
import { Credentials } from 'ish-core/models/credentials/credentials.model';
import { Customer, CustomerRegistrationType } from 'ish-core/models/customer/customer.model';
import { HttpError } from 'ish-core/models/http-error/http-error.model';
import { User } from 'ish-core/models/user/user.model';
import { SpecialValidators } from 'ish-shared/forms/validators/special-validators';

/**
 * The Registration Page Container renders the customer registration form using the {@link RegistrationFormComponent}
 *
 */
@Component({
  templateUrl: './registration-page.component.html',
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class RegistrationPageComponent implements OnInit {
  userError$: Observable<HttpError>;
  businessCustomerRegistration: boolean;

  constructor(
    private accountFacade: AccountFacade,
    private router: Router,
    private featureToggle: FeatureToggleService,
    private config: FormlyConfig
  ) {}

  submittedSubject$ = new Subject();

  fields: FormlyFieldConfig[];
  model = {};
  form = new FormGroup({});

  ngOnInit() {
    this.submittedSubject$.next(false);
    this.userError$ = this.accountFacade.userError$;
    this.businessCustomerRegistration = this.featureToggle.enabled('businessCustomerRegistration');
    this.fields = this.getRegistrationConfig();
  }

  cancelForm() {
    this.router.navigate(['/home']);
  }

  onCreate() {
    if (this.form.invalid) {
      this.submittedSubject$.next(true);
      return;
    }
    const formValue = this.form.value;

    const address = formValue.address;

    const customer: Customer = {
      isBusinessCustomer: false,
      customerNo: UUID.UUID(), // TODO: customerNo should be generated by the server - IS-24884
    };

    const user: User = {
      title: formValue.address.title,
      firstName: formValue.address.firstName,
      lastName: formValue.address.lastName,
      email: formValue.login,
      phoneHome: formValue.address.phoneHome,
      birthday: formValue.birthday === '' ? undefined : formValue.birthday, // TODO: see IS-22276
    };

    const credentials: Credentials = {
      login: formValue.login,
      password: formValue.password,
    };

    if (this.businessCustomerRegistration) {
      customer.isBusinessCustomer = true;
      customer.companyName = formValue.address.companyName1;
      customer.companyName2 = formValue.address.companyName2;
      customer.taxationID = formValue.taxationID;
      user.businessPartnerNo = 'U' + customer.customerNo;
    }

    const registration: CustomerRegistrationType = { customer, user, credentials, address };
    registration.captcha = this.form.get('captcha').value;
    registration.captchaAction = this.form.get('captchaAction').value;

    this.accountFacade.createUser(registration);
  }

  private getRegistrationConfig(): FormlyFieldConfig[] {
    return [
      {
        type: 'ish-registration-heading-field',
        templateOptions: {
          headingSize: 'h1',
          heading: 'account.register.heading',
          subheading: 'account.register.message',
        },
      },
      ...this.getCredentialsConfig(),
      {
        type: 'ish-registration-heading-field',
        templateOptions: {
          headingSize: 'h2',
          heading: this.businessCustomerRegistration
            ? 'account.register.company_information.heading'
            : 'account.register.address.headding',
          subheading: 'account.register.address.message',
          showRequiredInfo: true,
        },
      },
      {
        type: 'ish-fieldset-field',
        templateOptions: {
          fieldsetClass: 'row',
          childClass: 'col-md-10 col-lg-8 col-xl-6',
        },
        fieldGroup: [
          {
            type: 'ish-registration-address-field',
            templateOptions: {
              businessCustomer: this.businessCustomerRegistration,
            },
          },
          this.businessCustomerRegistration
            ? {
                key: 'taxationID',
                type: 'ish-text-input-field',
                templateOptions: {
                  label: 'account.address.taxation.label',
                  labelClass: 'col-md-4',
                  fieldClass: 'col-md-8',
                },
              }
            : {},
          {
            type: 'ish-registration-tac-field',
            key: 'termsAndConditions',
            templateOptions: {
              required: true,
            },
            validators: {
              validation: [Validators.pattern('true')],
            },
          },
          {
            type: 'ish-registration-buttons-field',
            templateOptions: {
              submitted$: this.submittedSubject$.asObservable(),
              onCancel: () => this.cancelForm(),
            },
          },
        ],
      },
      {
        type: 'ish-captcha-field',
        templateOptions: {
          topic: 'register',
        },
      },
    ];
  }
  private getCredentialsConfig(): FormlyFieldConfig[] {
    return [
      {
        type: 'ish-registration-heading-field',

        templateOptions: {
          headingSize: 'h2',
          heading: 'account.register.email_password.heading',
          subheading: 'account.register.email_password.message',
          showRequiredInfo: true,
        },
      },
      {
        type: 'ish-fieldset-field',
        templateOptions: {
          fieldsetClass: 'row',
          childClass: 'col-md-10 col-lg-8 col-xl-6',
        },
        fieldGroup: [
          {
            key: 'login',
            type: 'ish-email-field',
            templateOptions: {
              label: 'account.register.email.label',
              required: true,
              labelClass: 'col-md-4',
              fieldClass: 'col-md-8',
            },
            validation: {
              messages: {
                required: 'account.update_email.email.error.notempty',
              },
            },
          },
          {
            key: 'loginConfirmation',
            type: 'ish-email-field',
            templateOptions: {
              label: 'account.register.email_confirmation.label',
              required: true,
              labelClass: 'col-md-4',
              fieldClass: 'col-md-8',
            },
            validators: {
              validation: [SpecialValidators.equalToControl('login')],
            },
            validation: {
              messages: {
                required: 'account.update_email.email.error.notempty',
                equalTo: 'account.registration.email.not_match.error',
              },
            },
          },

          {
            key: 'password',
            type: 'ish-password-field',
            wrappers: [...this.config.getType('ish-password-field').wrappers, 'description'],
            templateOptions: {
              required: true,
              label: 'account.register.password.label',
              customDescription: {
                class: 'input-help',
                key: 'account.register.password.extrainfo.message',
                args: { 0: '7' },
              },
              labelClass: 'col-md-4',
              fieldClass: 'col-md-8',
              autocomplete: 'new-password',
            },
            validation: {
              messages: {
                required: 'account.update_password.new_password.error.required',
              },
            },
          },
          {
            key: 'passwordConfirmation',
            type: 'ish-password-field',
            templateOptions: {
              required: true,
              label: 'account.register.password_confirmation.label',
              labelClass: 'col-md-4',
              fieldClass: 'col-md-8',
              autocomplete: 'new-password',
            },
            validators: {
              validation: [SpecialValidators.equalToControl('password')],
            },
            validation: {
              messages: {
                required: 'account.register.password_confirmation.error.default',
                equalTo: 'account.update_password.confirm_password.error.stringcompare',
              },
            },
          },
        ],
      },
    ];
  }
}
